<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.4.1">
      <useBuildBlocker>false</useBuildBlocker>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>15</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.plugins.libvirt.BeforeJobSnapshotJobProperty plugin="libvirt-slave@1.8.5"/>
    <hudson.plugins.promoted__builds.JobPropertyImpl plugin="promoted-builds@2.28.1">
      <activeProcessNames>
        <string>Release Build Passed Regression</string>
        <string>Release Build Passed on all OS</string>
      </activeProcessNames>
    </hudson.plugins.promoted__builds.JobPropertyImpl>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.25">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <jenkins.plugins.slack.SlackNotifier_-SlackJobProperty plugin="slack@1.7">
      <teamDomain></teamDomain>
      <token></token>
      <room></room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyFailure>false</notifyFailure>
      <notifyBackToNormal>false</notifyBackToNormal>
      <notifyRepeatedFailure>false</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <showCommitList>false</showCommitList>
    </jenkins.plugins.slack.SlackNotifier_-SlackJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH_NAME</name>
          <description>branch name</description>
          <defaultValue>4.90_rel</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>P4CLEANWORKSPACE</name>
          <description>clean build</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>BUILD_RUN_UNITTEST</name>
          <description>run unittest</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>BUILD_PACKAGE_BUILD</name>
          <description>package build</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_OUTPUT_DIR</name>
          <description>build output dir</description>
          <defaultValue>build/il/bld_bll-el3_x86/Release/bin</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>STC_MAJ_MIN_VERSION</name>
          <description>major minor version TODO: get this from a file</description>
          <defaultValue>4.90</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RELEASE_BUILD</name>
          <description>Flag whether or not this build is a release build candidate. If a build is a release candidate then STC_CR license/entitlement will be disabled
</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.perforce.PerforceSCM" plugin="perforce@1.3.36">
    <configVersion>2</configVersion>
    <p4User>tableuser</p4User>
    <p4Passwd></p4Passwd>
    <p4Port>perforceproxy.cal.ci.spirentcom.com:1999</p4Port>
    <p4Client>${JOB_NAME}_${BRANCH_NAME}</p4Client>
    <projectPath>+//TestCenter/${BRANCH_NAME}/... //ws/...
-//TestCenter/*/Layer1/...
-//TestCenter/*/userdocauto/...
-//TestCenter/*/sandbox/...
-//TestCenter/*/.../il/...
-//TestCenter/*/.../hw/...
-//TestCenter/*/.../WebHelp/...
-//TestCenter/*/content/cts/...
-//TestCenter/*/common/lib/java/...
-//TestCenter/*/common/tools/scons/...
-//TestCenter/*/framework/ui/resultsanalysis/tools/jvm/...
-//TestCenter/*/common/lib/boost_1_34_0/...
-//TestCenter/*/Bakeoff_TestCaseScripts/...
-//TestCenter/*/other/...
-//TestCenter/*/documents/...
-//TestCenter/*/schedules/...
-//TestCenter/*/scm/...
-//TestCenter/*/regression/...
+//TestCenter/${BRANCH_NAME}/build/il/... //ws/build/il/...
-//TestCenter/${BRANCH_NAME}/build/il/cli/... //ws/build/il/cli/...
-//TestCenter/${BRANCH_NAME}/build/il/testframework/... //ws/build/il/testframework/...
-//TestCenter/*/.../ui/...
+//TestCenter/${BRANCH_NAME}/common/.../ui/... //ws/common/.../ui/...
+//TestCenter/${BRANCH_NAME}/framework/ui/automation/... //ws/framework/ui/automation/...</projectPath>
    <projectOptions>noallwrite clobber nocompress unlocked nomodtime rmdir</projectOptions>
    <p4SysDrive>C:</p4SysDrive>
    <p4SysRoot>C:\WINDOWS</p4SysRoot>
    <browser class="hudson.plugins.perforce.browsers.P4Web">
      <url>http://jenkins.ad.spirentcom.com:5104/</url>
      <p4WebEndShite>?ac=22</p4WebEndShite>
      <p4DifEndShite>?ac=19</p4DifEndShite>
      <p4ClEndShite>?ac=10</p4ClEndShite>
    </browser>
    <p4Tool>p4</p4Tool>
    <useClientSpec>false</useClientSpec>
    <useStreamDepot>false</useStreamDepot>
    <forceSync>false</forceSync>
    <alwaysForceSync>false</alwaysForceSync>
    <dontUpdateServer>false</dontUpdateServer>
    <disableAutoSync>false</disableAutoSync>
    <disableChangeLogOnly>false</disableChangeLogOnly>
    <disableSyncOnly>false</disableSyncOnly>
    <showIntegChanges>false</showIntegChanges>
    <useOldClientName>false</useOldClientName>
    <createWorkspace>true</createWorkspace>
    <updateView>true</updateView>
    <dontRenameClient>false</dontRenameClient>
    <updateCounterValue>false</updateCounterValue>
    <dontUpdateClient>false</dontUpdateClient>
    <exposeP4Passwd>false</exposeP4Passwd>
    <wipeBeforeBuild>false</wipeBeforeBuild>
    <quickCleanBeforeBuild>false</quickCleanBeforeBuild>
    <restoreChangedDeletedFiles>false</restoreChangedDeletedFiles>
    <wipeRepoBeforeBuild>false</wipeRepoBeforeBuild>
    <firstChange>-1</firstChange>
    <fileLimit>0</fileLimit>
    <excludedFilesCaseSensitivity>true</excludedFilesCaseSensitivity>
    <slaveClientNameFormat>${basename}-${hash}</slaveClientNameFormat>
    <lineEndValue>local</lineEndValue>
    <useViewMask>true</useViewMask>
    <useViewMaskForPolling>true</useViewMaskForPolling>
    <useViewMaskForSyncing>false</useViewMaskForSyncing>
    <useViewMaskForChangeLog>false</useViewMaskForChangeLog>
    <pollOnlyOnMaster>true</pollOnlyOnMaster>
  </scm>
  <assignedNode>bllbldlnx-v25</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>rm -f BLL_Linux_changelist_*.txt
echo $P4_CHANGELIST $JOB_NAME $BUILD_NUMBER &gt; BLL_Linux_changelist_$P4_CHANGELIST.txt
rm -rf $WORKSPACE/$BUILD_OUTPUT_DIR/STAKCommands</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>if [ &quot;$P4CLEANWORKSPACE&quot; = &quot;true&quot; ]; then
	ccache -C
fi

if [ &quot;$RELEASE_BUILD&quot; = &quot;true&quot; ]; then
    cp -f $WORKSPACE/framework/bll/core/include/licensing/ga_release/ControlledReleaseCheck.h $WORKSPACE/framework/bll/core/include/licensing/ControlledReleaseCheck.h
fi</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>export LD_LIBRARY_PATH=/usr/gcc_4_9/lib:$LD_LIBRARY_PATH
export PATH=/usr/gcc_4_9/bin:$PATH
python genSln.py
./scons.sh -f SConstruct.bll -j 12 --debug=time debug=0 coverage=0 target=bll-el3 2&gt;&amp;1 | tee compile_output.txt
python $WORKSPACE/framework/tools/buildUtil/gcc_warning_detect.py compile_output.txt
python $WORKSPACE/common/idl/crc.py -f bll_idl_crc.txt --desc &quot;$JOB_NAME $BUILD_NUMBER&quot;

# scons -j 12 --debug=time debug=0 coverage=0 target=bll-el3 2&gt;&amp;1 | tee compile_output.txt
# python $WORKSPACE/framework/tools/buildUtil/gcc_warning_detect.py compile_output.txt</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>if [ &quot;$BUILD_RUN_UNITTEST&quot; = &quot;true&quot; ]; then
    cd $WORKSPACE/$BUILD_OUTPUT_DIR
    python $WORKSPACE/framework/tools/testRunner/testRunner.py --runInParallel=4 --bll --stak --archive
fi</command>
    </hudson.tasks.Shell>
    <hudson.plugins.python.Python plugin="python@1.3">
      <command>import os
import zipfile
import urllib2
import tarfile
import shutil

def _download_file_from_url(url=None):
    file_name = url.split(&apos;/&apos;)[-1]
    u = urllib2.urlopen(url)
    f = open(file_name, &apos;wb&apos;)
    meta = u.info()
    file_size = int(meta.getheaders(&quot;Content-Length&quot;)[0])
    print &quot;Downloading: %s Bytes: %s&quot; % (file_name, file_size)

    file_size_dl = 0
    block_sz = 8192
    while True:
        buffer = u.read(block_sz)
        if not buffer:
            break

        file_size_dl += len(buffer)
        f.write(buffer)
        status = r&quot;%10d  [%3.2f%%]&quot; % (file_size_dl, file_size_dl * 100. / file_size)
        status = status + chr(8)*(len(status)+1)
        print status,

    f.close()

def unzip(fname,dir_name):
    if (fname.endswith(&quot;zip&quot;)):
        zip_ref = zipfile.ZipFile(fname, &apos;r&apos;)
        zip_ref.extractall(dir_name)
        zip_ref.close()
        print &quot;Extracted in %s Directory&quot; % dir_name
    else:
        print &quot;Not a zip file: &apos;%s &apos;&quot; % fname

def extract_tarball(fname):
    if (fname.endswith(&quot;tgz&quot;)):
        tar = tarfile.open(fname, &quot;r:gz&quot;)
        tar.extractall()
        tar.close()
    elif (fname.endswith(&quot;tar&quot;)):
       tar = tarfile.open(fname, &quot;r:&quot;)
       tar.extractall()
       tar.close()
        
# -- download and extract orion-res*.zip file if 
# -- specified in the job parameter
#try:
#    orion_res_url = os.environ[&apos;ORION_RES_URL&apos;]
#except Exception, e:
#    print &quot;Cannot find ORION_RES_URL in environment variable, skipping orion-res zip file download&quot;
#    exit(0)
    
#if len(orion_res_url) &gt; 0:
#    print &quot;Downloading from %s&quot; % orion_res_url 
#    zip_filename = os.path.basename(orion_res_url)
#    if os.path.exists(zip_filename):
#        os.remove(zip_filename) # clean up previous file if exists
#    orion_res_output_dir = os.path.join(os.environ[&apos;WORKSPACE&apos;], &quot;build&quot;, &quot;il&quot;, &quot;bld_bll-el3_x86&quot;, &quot;Release&quot;, &quot;bin&quot;, &apos;orion-res&apos;)
#    if os.path.exists(orion_res_output_dir):
#        shutil.rmtree(orion_res_output_dir) # clean up previous output dir if exists
#    _download_file_from_url(orion_res_url)
#    unzip(zip_filename, orion_res_output_dir)#
#    os.chmod(os.path.join(os.environ[&apos;WORKSPACE&apos;], &quot;build&quot;, &quot;il&quot;, &quot;bld_bll-el3_x86&quot;, &quot;Release&quot;, &quot;bin&quot;, &apos;orion-res&apos;, &apos;bin&apos;, &apos;orion-res&apos;), 0755)

# -- download and extract magellan-frontend*.tgz file if 
# -- specified in the job parameter
#try:
#    magellan_frontend_url = os.environ[&apos;MAGELLAN_FRONTEND_URL&apos;]
#except Exception, e:
#    print &quot;Cannot find MAGELLAN_FRONTEND_URL in environment variable, skipping MAGELLAN_FRONTEND_URL tar file download&quot;
#    exit(0)
    
#if len(magellan_frontend_url) &gt; 0:
#    print &quot;Downloading from %s&quot; % magellan_frontend_url 
#    os.chdir(&apos;bin&apos;)
#    tgz_filename = os.path.basename(magellan_frontend_url)
#    if os.path.exists(tgz_filename):
#        os.remove(tgz_filename) # clean up previous file if exists
#    if os.path.exists(&apos;build&apos;):
#        shutil.rmtree(&apos;build&apos;) # clean up previous output dir from tgz file if exists
#    _download_file_from_url(magellan_frontend_url)
#    extract_tarball(tgz_filename)
#    shutil.move(&apos;build&apos;, os.path.join(orion_res_output_dir, &apos;content&apos;))

# --Extract orion-res*.zip
zip_filename = &apos;orion-res.linux-386.zip&apos;
orion_res_output_dir = os.path.join(os.environ[&apos;WORKSPACE&apos;], &quot;build&quot;, &quot;il&quot;, &quot;bld_bll-el3_x86&quot;, &quot;Release&quot;, &quot;bin&quot;, &apos;orion-res&apos;)
if os.path.exists(orion_res_output_dir):
    shutil.rmtree(orion_res_output_dir) # clean up previous output dir if exists
unzip(zip_filename, orion_res_output_dir)
os.chmod(os.path.join(os.environ[&apos;WORKSPACE&apos;], &quot;build&quot;, &quot;il&quot;, &quot;bld_bll-el3_x86&quot;, &quot;Release&quot;, &quot;bin&quot;, &apos;orion-res&apos;, &apos;bin&apos;, &apos;orion-res&apos;), 0755)

# -- Extract magellan-frontend*.tgz
os.chdir(&apos;bin&apos;)
tgz_filename = &apos;magellan-frontend.tgz&apos;
if os.path.exists(&apos;build&apos;):
    shutil.rmtree(&apos;build&apos;) # clean up previous output dir from tgz file if exists
extract_tarball(tgz_filename)
shutil.move(&apos;build&apos;, os.path.join(orion_res_output_dir, &apos;content&apos;))</command>
    </hudson.plugins.python.Python>
    <hudson.tasks.Shell>
      <command>cd $WORKSPACE/$BUILD_OUTPUT_DIR
rm -f TestCenter*.tar.gz
if [ &quot;$BUILD_PACKAGE_BUILD&quot; = &quot;true&quot; ]; then
    python $WORKSPACE/framework/tools/buildUtil/package.py --arch-dir=Spirent_TestCenter_Application_Linux_Server --package=TestCenter 
    python $WORKSPACE/framework/tools/buildUtil/package.py --arch-dir=Spirent_TestCenter_Application_Linux_Server --package=STAKCommands.beta
    #cp TestCenter.Linux.tar.gz TestCenter.Linux.no_version.tar.gz
    #python $WORKSPACE/framework/tools/buildUtil/setver.py --package=TestCenter.Linux.tar.gz $STC_MAJ_MIN_VERSION $P4_CHANGELIST
fi</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>python $WORKSPACE/framework/tools/buildUtil/pw_build_tracker.py --build_dir=$WORKSPACE/$BUILD_OUTPUT_DIR</command>
    </hudson.tasks.Shell>
    <hudson.plugins.python.Python plugin="python@1.3">
      <command>import os

bld_dir = os.environ[&apos;BUILD_OUTPUT_DIR&apos;]
version = os.environ[&apos;STC_MAJ_MIN_VERSION&apos;]
wrk_space = os.environ[&apos;WORKSPACE&apos;]
in_file_name = &apos;pw_packages_to_test.txt&apos;
out_file_name = &apos;pw_packages_to_test&apos;
out_dir = &quot;/results/SCMSmartTest&quot;

file_to_read = os.path.join(wrk_space, bld_dir, in_file_name)
file_to_update = os.path.join(out_dir, version, out_file_name)

reader = open(file_to_read, &apos;rb&apos;)
writer = open(file_to_update, &apos;wb&apos;)
for row in reader:
    writer.write(row)
    print &quot;New Tags: %s&quot; % row</command>
    </hudson.plugins.python.Python>
    <hudson.plugins.python.Python plugin="python@1.3">
      <command>import shutil
import os

output_filename = &apos;orion-res&apos;
dir_name = os.path.join(os.environ[&apos;WORKSPACE&apos;], &apos;build&apos;, &apos;il&apos;, &apos;bld_bll-el3_x86&apos;, &apos;Release&apos;, &apos;bin&apos;, &apos;orion-res&apos;)
if os.path.exists(&apos;orion-res.zip&apos;):
    os.remove(&apos;orion-res.zip&apos;)
shutil.make_archive(output_filename, &apos;zip&apos;, dir_name)</command>
    </hudson.plugins.python.Python>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>${BUILD_OUTPUT_DIR}/TestCenter*.tar.gz, ${BUILD_OUTPUT_DIR}/UnitTestLogs.tar.gz, ${BUILD_OUTPUT_DIR}/pw_packages_to_test_report.txt, ${BUILD_OUTPUT_DIR}/pw_packages_to_test.txt, ${BUILD_OUTPUT_DIR}/pw_unknown_files_report.txt, BLL_Linux_changelist*.txt,gcc_warning.log, bll_idl_crc.txt, ${BUILD_OUTPUT_DIR}/STAKCommands.beta.Linux.tar.gz,orion-res.zip</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.tasks.BuildTrigger>
      <childProjects>release_bll_linux_x86client</childProjects>
      <threshold>
        <name>SUCCESS</name>
        <ordinal>0</ordinal>
        <color>BLUE</color>
        <completeBuild>true</completeBuild>
      </threshold>
    </hudson.tasks.BuildTrigger>
    <hudson.plugins.logparser.LogParserPublisher plugin="log-parser@2.0">
      <unstableOnWarning>false</unstableOnWarning>
      <failBuildOnError>true</failBuildOnError>
      <showGraphs>false</showGraphs>
      <parsingRulesPath>/var/lib/jenkins/log_parse_rule</parsingRulesPath>
      <useProjectRule>false</useProjectRule>
    </hudson.plugins.logparser.LogParserPublisher>
    <hudson.tasks.junit.JUnitResultArchiver plugin="junit@1.20">
      <testResults>${BUILD_OUTPUT_DIR}/*Result.html.xml</testResults>
      <keepLongStdio>false</keepLongStdio>
      <testDataPublishers>
        <hudson.plugins.claim.ClaimTestDataPublisher plugin="claim@2.9"/>
      </testDataPublishers>
      <healthScaleFactor>1.0</healthScaleFactor>
      <allowEmptyResults>false</allowEmptyResults>
    </hudson.tasks.junit.JUnitResultArchiver>
    <hudson.tasks.Fingerprinter>
      <targets>${BUILD_OUTPUT_DIR}/TestCenter*.tar.gz, BLL_Linux_changelist*.txt, bll_idl_crc.txt</targets>
    </hudson.tasks.Fingerprinter>
    <hudson.plugins.claim.ClaimPublisher plugin="claim@2.9"/>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.57">
      <recipientList>engstciteam@spirent.com, ENGCIFirstResponderTeam@spirent.com</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.FailureTrigger>
          <email>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.DevelopersRecipientProvider/>
              <hudson.plugins.emailext.plugins.recipients.ListRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern></attachmentsPattern>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.FailureTrigger>
      </configuredTriggers>
      <contentType>default</contentType>
      <defaultSubject>$DEFAULT_SUBJECT</defaultSubject>
      <defaultContent>$DEFAULT_CONTENT</defaultContent>
      <attachmentsPattern></attachmentsPattern>
      <presendScript></presendScript>
      <postsendScript></postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo></replyTo>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.8.8"/>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@2.13.1">
      <details>
        <artifactoryName>artifactory.srv.orionprod.net</artifactoryName>
        <artifactoryUrl>https://artifactory.srv.orionprod.net/artifactory</artifactoryUrl>
        <stagingPlugin/>
      </details>
      <resolverDetails>
        <artifactoryName>artifactory.srv.orionprod.net</artifactoryName>
        <artifactoryUrl>https://artifactory.srv.orionprod.net/artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>true</useSpecs>
      <uploadSpec>
        <spec></spec>
      </uploadSpec>
      <downloadSpec>
        <spec>{
    &quot;files&quot;: [
        {
            &quot;pattern&quot;: &quot;stc/temeva/orion-res.linux-386.zip&quot;,
            &quot;target&quot;: &quot;./orion-res.linux-386.zip&quot;,
            &quot;flat&quot;: &quot;true&quot;
        },
        {
            &quot;pattern&quot;: &quot;stc/temeva/magellan-frontend.tgz&quot;,
            &quot;target&quot;: &quot;./bin/magellan-frontend.tgz&quot;,
            &quot;flat&quot;: &quot;true&quot;
        }

    ]
}</spec>
      </downloadSpec>
      <deployPattern></deployPattern>
      <resolvePattern></resolvePattern>
      <matrixParams></matrixParams>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns></includePatterns>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName></customBuildName>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
  </buildWrappers>
</project>