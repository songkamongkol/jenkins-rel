<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>15</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.4.1">
      <useBuildBlocker>false</useBuildBlocker>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH_NAME</name>
          <description>branch name</description>
          <defaultValue>4.73_rel</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>P4CLEANWORKSPACE</name>
          <description>clean build</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BLL_BUILD_NUMBER</name>
          <description>This is used to pass a common build number to all IL and BLL build jobs run during the nightly build process.</description>
          <defaultValue>BAD_BUILD_NUMBER</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>STC_MAJ_MIN_VERSION</name>
          <description></description>
          <defaultValue>4.73</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SOURCE_OS</name>
          <description></description>
          <defaultValue>IL</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>OUTPUT_DIR</name>
          <description></description>
          <defaultValue>\\storage\gr\TestCenter\4.47\SR_Builds\SR447.1.1\Manufacturing</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH_ID</name>
          <description></description>
          <defaultValue>6</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.22">
      <autoRebuild>false</autoRebuild>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <scm class="hudson.plugins.perforce.PerforceSCM" plugin="perforce@1.3.34">
    <configVersion>2</configVersion>
    <p4User>scmbuild</p4User>
    <p4Passwd></p4Passwd>
    <p4Port>perforce.spirentcom.com:1666</p4Port>
    <p4Client>${JOB_NAME}_${BRANCH_NAME}</p4Client>
    <projectPath>//TestCenter/profx_iso/Labserver/... //ws/...</projectPath>
    <projectOptions>noallwrite clobber nocompress unlocked nomodtime rmdir</projectOptions>
    <clientOwner></clientOwner>
    <p4SysDrive>C:</p4SysDrive>
    <p4SysRoot>C:\WINDOWS</p4SysRoot>
    <browser class="hudson.plugins.perforce.browsers.P4Web">
      <url>http://jenkins.ad.spirentcom.com:5104/</url>
      <p4WebEndShite>?ac=22</p4WebEndShite>
      <p4DifEndShite>?ac=19</p4DifEndShite>
      <p4ClEndShite>?ac=10</p4ClEndShite>
    </browser>
    <p4Tool>p4</p4Tool>
    <useClientSpec>false</useClientSpec>
    <useStreamDepot>false</useStreamDepot>
    <forceSync>false</forceSync>
    <alwaysForceSync>false</alwaysForceSync>
    <dontUpdateServer>false</dontUpdateServer>
    <disableAutoSync>false</disableAutoSync>
    <disableChangeLogOnly>false</disableChangeLogOnly>
    <disableSyncOnly>false</disableSyncOnly>
    <showIntegChanges>false</showIntegChanges>
    <useOldClientName>false</useOldClientName>
    <createWorkspace>true</createWorkspace>
    <updateView>true</updateView>
    <dontRenameClient>false</dontRenameClient>
    <updateCounterValue>false</updateCounterValue>
    <dontUpdateClient>false</dontUpdateClient>
    <exposeP4Passwd>false</exposeP4Passwd>
    <wipeBeforeBuild>false</wipeBeforeBuild>
    <quickCleanBeforeBuild>false</quickCleanBeforeBuild>
    <restoreChangedDeletedFiles>false</restoreChangedDeletedFiles>
    <wipeRepoBeforeBuild>false</wipeRepoBeforeBuild>
    <firstChange>-1</firstChange>
    <fileLimit>0</fileLimit>
    <excludedFilesCaseSensitivity>true</excludedFilesCaseSensitivity>
    <slaveClientNameFormat>${basename}-${hash}</slaveClientNameFormat>
    <lineEndValue>local</lineEndValue>
    <useViewMask>true</useViewMask>
    <useViewMaskForPolling>true</useViewMaskForPolling>
    <useViewMaskForSyncing>false</useViewMaskForSyncing>
    <useViewMaskForChangeLog>false</useViewMaskForChangeLog>
    <pollOnlyOnMaster>true</pollOnlyOnMaster>
  </scm>
  <quietPeriod>120</quietPeriod>
  <assignedNode>ilpkg-03</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>true</blockBuildWhenUpstreamBuilding>
  <authToken>meenuallowedtodothis</authToken>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -ex

# uncompress labserver image file
# rm -f labServerBaseVm.img.gz
cp -f labServerBaseVm.img.gz labServerBaseVm.img.gz.save
rm -f labServerBaseVm.img
gunzip labServerBaseVm.img.gz
</command>
    </hudson.tasks.Shell>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.35">
      <project>stcapi_rest_api</project>
      <filter>deployment/linux/etc/init.d/stcapi</filter>
      <target></target>
      <excludes></excludes>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector"/>
      <flatten>true</flatten>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -ex

# -- setup build number and path based on the branch name
if [ &quot;$BRANCH_NAME&quot; = &quot;integration&quot; ]; then
     export BRANCH_ID=&apos;3&apos;
fi

if [ &quot;$BRANCH_NAME&quot; = &quot;4.40_rel&quot; ]; then
     export BRANCH_ID=&apos;6&apos;
fi

if [[ $BRANCH_NAME = *_rel* ]]; then
     export BRANCH_ID=&apos;6&apos;
fi

if [ &quot;$BRANCH_NAME&quot; = &quot;release&quot; ]; then
     export BRANCH_ID=&apos;6&apos;
fi

export RAW_BLDSTR=${BLL_BUILD_NUMBER}${BRANCH_ID}
printf -v BLDNUMBER &quot;%04d&quot; $RAW_BLDSTR
export FULL_BUILD=${STC_MAJ_MIN_VERSION}.${BLDNUMBER}
export MARTIN_TAR_DIR=/gibson/TestCenter/${STC_MAJ_MIN_VERSION}/Engineering_Builds/GUI_BLL/${FULL_BUILD}/tar

# -- copy the tar balls from martin
rm -f Spirent_TestCenter_LS_${STC_MAJ_MIN_VERSION}.tar.gz
rm -f Spirent_TestCenter_Auto_Linux_${STC_MAJ_MIN_VERSION}.tar.gz
cp ${MARTIN_TAR_DIR}/Spirent_TestCenter_LS_${STC_MAJ_MIN_VERSION}.tar.gz $WORKSPACE
#cp ${MARTIN_TAR_DIR}/Spirent_TestCenter_Auto_Linux_${STC_MAJ_MIN_VERSION}.tar.gz $WORKSPACE

# Re-structure LS tar ball according to the requirement for LS VM
rm -rf ./Spirent_TestCenter_Application_Linux_Server
tar xvfz Spirent_TestCenter_LS_${STC_MAJ_MIN_VERSION}.tar.gz
#mv Spirent_TestCenter_Auto_Linux_${STC_MAJ_MIN_VERSION}.tar.gz ./Spirent_TestCenter_Application_Linux_Server/
rm -f Spirent_TestCenter_LS_${STC_MAJ_MIN_VERSION}.tar.gz
tar cvfz Spirent_TestCenter_LS_${STC_MAJ_MIN_VERSION}.tar.gz Spirent_TestCenter_Application_Linux_Server
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

baseimg=$WORKSPACE/labServerBaseVm.img
lstarball=$WORKSPACE/Spirent_TestCenter_LS_${STC_MAJ_MIN_VERSION}.tar.gz
echo &quot;STC API Linux filename is $filename&quot;

# -- mount the qcow image
TmpDir=/tmp/vm
Dev=/dev/nbd0
echo &quot;Updating server $lstarball on image file: $baseimg&quot;
sudo modprobe nbd max_part=8
sudo qemu-nbd -d $Dev
sudo qemu-nbd -c $Dev $baseimg
mkdir -p $TmpDir
echo &quot;Device $Dev&quot;
# TODO Takes a bit to mount need to check if the device exists first
sleep 5
# make sure the devices mounted
sudo fdisk -l $Dev

# mount the qcow as a block device
sudo mount /dev/nbd0p1 $TmpDir
Dir=`pwd`
# untar a version of the server
pushd $TmpDir/home/stc
sudo mv -f STC_SERVER OLD_SERVER
sudo tar -z -x -v -f $lstarball -C $TmpDir/home/stc
sudo mv Spirent_TestCenter_Application_Linux_Server STC_Server
sudo chown -R 500:500 STC_Server
sudo cp $WORKSPACE/stcapi $TmpDir/etc/init.d/stcapi
sudo chmod a+x $TmpDir/etc/init.d/stcapi

# -- add new files per Grant T.
sudo cp $WORKSPACE/rpms/labServerVM/SOURCES/stc $TmpDir/etc/init.d/stc
sudo chmod a+x $TmpDir/etc/init.d/stc
sudo cp $WORKSPACE/rpms/labServerVM/SOURCES/admin_sh $TmpDir/home/admin/admin_sh


popd
# Set vm to dhcp by default
pushd $TmpDir/etc/sysconfig/network-scripts
sudo echo -e &quot;DEVICE=eth0\nTYPE=Ethernet\nNM_CONTROLLED=no\nONBOOT=yes\nBOOTPROTO=dhcp\nPEERDNS=yes&quot; &gt; /tmp/ifcfg-eth0.new
sudo rm -f ifcfg-eth0
sudo mv /tmp/ifcfg-eth0.new ifcfg-eth0
sudo sudo chown root:root ifcfg-eth0
popd

# remove old mac addresses and donâ€™t save the new ones
pushd $TmpDir/etc/udev/rules.d
sudo rm -f 70-persistent-net.rules
sudo rm -f 75-persistent-net-generator.rules
sudo touch 75-persistent-net-generator.rules
popd

# Unmount the image
cd $WORKSPACE
sudo umount $TmpDir
sudo qemu-nbd -d $Dev

# Base image plus REST api
sudo mv labServerBaseVm.img labServerVM.img
sudo chown spirent:spirent labServerVM.img

# Create tardis package
sudo rm -f labServer.tgz
sudo rm -f labServer.zip
tar cvzf labServer.tgz labServerVM.img package.xml
zip labServer.zip labServer.tgz

# create the vmdk version for vmware
sudo qemu-img convert -f qcow2 labServerVM.img -O vmdk labServerVM.vmdk
sudo ovftool -o labServer.vmx labServer.ova
sudo chown spirent:spirent labServer.ova labServerVM.vmdk

# Archive
sudo rm -f labServerVM.img.gz
sudo rm -f labServerVM.vmdk.gz
gzip -f labServerVM.img
gzip -f labServerVM.vmdk

# create md5sum
md5sum labServer.zip &gt; labServer.zip.md5

# Create Lab Server VM image MD5 sums for build server.
md5sum labServerVM.img.gz &gt; labServerVM.img.gz.md5
md5sum labServer.ova &gt; labServer.ova.md5
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command># Fetch items needed to run following python script
wget -N http://qmanager.cal.ci.spirentcom.com/html/python/tools/qmupload.py
</command>
    </hudson.tasks.Shell>
    <hudson.plugins.python.Python plugin="python@1.2">
      <command>import os
import sys
import xmlrpclib

WORKSPACE=os.environ[&apos;WORKSPACE&apos;]
sys.path.insert(0, WORKSPACE)
import qmupload

LS_IMAGE = os.path.join(WORKSPACE, &apos;labServerVM.img.gz&apos;)
QMUSER = &apos;regression_labserver&apos;
QMSERVER = &apos;qmanager.cal.ci.spirentcom.com&apos;
QMURL = &apos;http://%s:8080&apos; % (QMSERVER,)

qm = xmlrpclib.ServerProxy(QMURL, allow_none=True)


def upload_image(image_path):
    if not os.path.isfile(image_path):
        raise RuntimeError(&apos;missing image file: &apos; + image_path)

    print &gt;&gt; sys.stderr, &apos;===&gt; uploading&apos;, os.path.basename(image_path), &apos;to QManager&apos;
    qmupload.send_file_to_qmanager(QMUSER, image_path, False, QMSERVER, False)


def qm_image_current(image):
    new_md5_file = image + &apos;.md5&apos;
    uploaded_md5_file = image + &apos;.uploaded.md5&apos;

    if not os.path.isfile(uploaded_md5_file):
        return False

    # Check if image is already present on qmanager server.
    if not image in qm.list_files(QMUSER):
        return False

    # Read previously uploaded hash.
    with open(uploaded_md5_file) as in_file:
        old_hash = in_file.read().strip()

    # Read hash of current file.
    with open(new_md5_file) as in_file:
        new_hash = in_file.read().strip()

    if old_hash != new_hash:
        qm.delete_file(QMUSER, LS_IMAGE)
        with open(uploaded_md5_file, &apos;w&apos;) as out_file:
            out_file.write(new_hash)
        return False

    return True


# Upload lab server VM image to QManager if needed.
if not qm_image_current(LS_IMAGE):
    upload_image(LS_IMAGE)
</command>
    </hudson.plugins.python.Python>
    <hudson.tasks.Shell>
      <command>mv labServerBaseVm.img.gz.save labServerBaseVm.img.gz</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.logparser.LogParserPublisher plugin="log-parser@1.0.8">
      <unstableOnWarning>false</unstableOnWarning>
      <failBuildOnError>true</failBuildOnError>
      <parsingRulesPath>/var/lib/jenkins/il_log_parse_rule</parsingRulesPath>
    </hudson.plugins.logparser.LogParserPublisher>
    <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@0.17">
      <buildSteps>
        <hudson.tasks.Shell>
          <command>export RSYNCUSER=scm
export BUILD_OUTPUT_DIR=$WORKSPACE
export MARTIN_ROOT=/spirent/data/archive/pv/TestCenter
export MARTIN=martin.spirentcom.com
export RAW_BLDSTR=${BLL_BUILD_NUMBER}${BRANCH_ID}
printf -v BLDNUMBER &quot;%04d&quot; $RAW_BLDSTR
export BLDNBR=${STC_MAJ_MIN_VERSION}.${BLDNUMBER}


export BUILD_DIR=$MARTIN_ROOT/$STC_MAJ_MIN_VERSION/Engineering_Builds/GUI_BLL/$BLDNBR/tar
sudo chmod 755 $BUILD_OUTPUT_DIR/labServer*
# -- transfer (via rsync) build output files to martin
ssh ${RSYNCUSER}@${MARTIN} mkdir -p $BUILD_DIR
rsync -avz $BUILD_OUTPUT_DIR/labServerVM.img.gz* ${RSYNCUSER}@${MARTIN}:$BUILD_DIR/
rsync -avz $BUILD_OUTPUT_DIR/labServer.ova* ${RSYNCUSER}@${MARTIN}:$BUILD_DIR/
rsync -avz $BUILD_OUTPUT_DIR/labServer.zip* ${RSYNCUSER}@${MARTIN}:$BUILD_DIR/


</command>
        </hudson.tasks.Shell>
      </buildSteps>
      <scriptOnlyIfSuccess>true</scriptOnlyIfSuccess>
      <scriptOnlyIfFailure>false</scriptOnlyIfFailure>
      <markBuildUnstable>false</markBuildUnstable>
      <executeOn>BOTH</executeOn>
    </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.39">
      <recipientList>somboon.ongkamongkol@spirent.com</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.FailureTrigger>
          <email>
            <recipientList></recipientList>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.DevelopersRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern></attachmentsPattern>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo></replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.FailureTrigger>
      </configuredTriggers>
      <contentType>default</contentType>
      <defaultSubject>$DEFAULT_SUBJECT</defaultSubject>
      <defaultContent>$DEFAULT_CONTENT</defaultContent>
      <attachmentsPattern></attachmentsPattern>
      <presendScript></presendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_RECIPIENTS</replyTo>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.5.16"/>
  </buildWrappers>
</project>