<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>IL Build job for centralboot image targets:&lt;br&gt;&#xd;
target=centralboot packaging=1&lt;br&gt;&#xd;
Copies artfacts from ci jobs: il_changeling_all, il_chos2, il_virtual, il_vtc, il_testmodule_contents&lt;br&gt;&#xd;
Then runs Centralboot to generate centralboot image and run reversion script to update the version info.&lt;br&gt;&#xd;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.4.1">
      <useBuildBlocker>false</useBuildBlocker>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <org.datadog.jenkins.plugins.datadog.DatadogJobProperty plugin="datadog@1.1.1">
      <enableFile>false</enableFile>
      <tagFile></tagFile>
      <enableProperty>false</enableProperty>
      <tagProperties></tagProperties>
      <emitSCMEvents>true</emitSCMEvents>
    </org.datadog.jenkins.plugins.datadog.DatadogJobProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>15</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.plugins.libvirt.BeforeJobSnapshotJobProperty plugin="libvirt-slave@1.8.5"/>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.25">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <jenkins.plugins.slack.SlackNotifier_-SlackJobProperty plugin="slack@1.7">
      <teamDomain></teamDomain>
      <token></token>
      <room></room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyFailure>false</notifyFailure>
      <notifyBackToNormal>false</notifyBackToNormal>
      <notifyRepeatedFailure>false</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <showCommitList>false</showCommitList>
    </jenkins.plugins.slack.SlackNotifier_-SlackJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH_NAME</name>
          <description>branch name</description>
          <defaultValue>5.10_rel</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>P4CLEANWORKSPACE</name>
          <description>clean build</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BLL_BUILD_NUMBER</name>
          <description>This is used to pass a common build number to all IL and BLL build jobs run during the nightly build process.</description>
          <defaultValue>BAD_BUILD_NUMBER</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>STC_MAJ_MIN_VERSION</name>
          <description></description>
          <defaultValue>5.10</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SOURCE_OS</name>
          <description></description>
          <defaultValue>IL</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH_ID</name>
          <description></description>
          <defaultValue>6</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>INCLUDE_APPSEC_PKG</name>
          <description></description>
          <defaultValue>TRUE</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>YOCTO_VERSION</name>
          <description>1.0 or 1.5</description>
          <defaultValue>1.5</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>APP_ARCH</name>
          <description></description>
          <defaultValue>x86_64</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="org.jenkinsci.plugins.p4.PerforceScm" plugin="p4@1.7.7">
    <credential>scmbuild</credential>
    <workspace class="org.jenkinsci.plugins.p4.workspace.ManualWorkspaceImpl">
      <charset>none</charset>
      <pinHost>false</pinHost>
      <name>jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME}</name>
      <spec>
        <allwrite>false</allwrite>
        <clobber>false</clobber>
        <compress>false</compress>
        <locked>false</locked>
        <modtime>false</modtime>
        <rmdir>false</rmdir>
        <streamName></streamName>
        <line>LOCAL</line>
        <view>//SCM/Scripts/ci_* //jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME}/Build_Scripts/Scripts/ci_*
+//TestCenter/${BRANCH_NAME}/... //jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME}/...
-//TestCenter/*/sandbox/... //jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME}/*/sandbox/...
-//TestCenter/*/.../WebHelp/... //jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME}/*/.../WebHelp/...
-//TestCenter/*/Bakeoff_TestCaseScripts/... //jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME}/*/Bakeoff_TestCaseScripts/... 
-//TestCenter/*/other/... //jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME}/*/other/...
-//TestCenter/*/documents/... //jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME}/*/documents/...
-//TestCenter/*/schedules/... //jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME}/*/schedules/...
-//TestCenter/*/scm/... //jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME}/*/scm/...
-//TestCenter/*/dmcp/... //jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME}/*/dmcp/...
-//TestCenter/*/regression/... //jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME}/*/regression/... 
-//TestCenter/*/userdocauto/... //jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME}/*/userdocauto/...
-//TestCenter/*/common/lib/boost_1_34_0/... //jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME}/*/common/lib/boost_1_34_0/...
-//TestCenter/*/framework/ui/... //jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME}/*/framework/ui/... 
-//TestCenter/*/content/.../ui/... //jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME}/*/content/.../ui/...
-//TestCenter/*/.../bll/... //jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME}/*/.../bll/...
+//TestCenter/${BRANCH_NAME}/framework/bll/base/... //jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME}/framework/bll/base/...
+//TestCenter/${BRANCH_NAME}/framework/bll/unittestdrv/... //jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME}/framework/bll/unittestdrv/...
+//TestCenter/${BRANCH_NAME}/framework/bll/vendor/... //jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME}/framework/bll/vendor/...
//hypervisor/mainline/amara/ChassisImage/...  //jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME}/ChassisImage/...</view>
        <type>WRITABLE</type>
        <serverID></serverID>
        <backup>false</backup>
      </spec>
    </workspace>
    <populate class="org.jenkinsci.plugins.p4.populate.SyncOnlyImpl">
      <have>true</have>
      <force>false</force>
      <modtime>false</modtime>
      <quiet>true</quiet>
      <pin></pin>
      <parallel>
        <enable>false</enable>
        <threads>4</threads>
        <minfiles>1</minfiles>
        <minbytes>1024</minbytes>
      </parallel>
      <revert>false</revert>
    </populate>
  </scm>
  <quietPeriod>120</quietPeriod>
  <assignedNode>ilpkg-02</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>true</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>env


echo Clean up prior to extracting tarballs

# make the version file writeable
sudo chmod 777 $WORKSPACE/build/il/version

# need to remove information in repos directory and packages directory
sudo -S rm -rf $WORKSPACE/build/il/repos/*
sudo -S rm -rf $WORKSPACE/build/il/packages/*


sudo scons target=packageclean
sudo scons target=kernelclean

rm -f $WORKSPACE/*.txt</command>
    </hudson.tasks.Shell>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.38.1">
      <project>release_launch_nightly_packaging</project>
      <filter>*IL_*.txt,BUILD_*.txt</filter>
      <target></target>
      <excludes></excludes>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector"/>
      <flatten>true</flatten>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

if [[ $INCLUDE_APPSEC_PKG == &quot;FALSE&quot; ]]; then 
    exit 0
fi

for i in $(seq 1 3)
   do
      if [ -f /mnt/builds/jenkins/il_changeling_all_yocto-${BRANCH_NAME}_promoting.txt ]; then
         echo &quot;Promotion is in progress, wait for 5 minutes&quot;
         sleep 300
      elif (( $i &lt; 3 )) ; then
         echo &quot;No promotion is in progress, proceeding with packaging&quot;
         break
      fi
done

echo &quot;Packaging started&quot; &gt; /mnt/builds/jenkins/il_changeling_all_yocto-${BRANCH_NAME}_packaging.txt
echo Copying il_changeling_all build artifacts from /mnt/builds/jenkins/il_changeling_all_yocto-$BRANCH_NAME/build-packaging/
ls -algh /mnt/builds/jenkins/il_changeling_all_yocto-$BRANCH_NAME/build-packaging/*.txt
filename=`ls /mnt/builds/jenkins/il_changeling_all_yocto-$BRANCH_NAME/build-packaging/*.txt`
changelist=${filename: -10:6}
content=`cat $filename`
content=${content//\&quot;/}
buildno=${content#*number}
echo $changelist il_changeling_all_yocto $buildno &gt; .changelists
mkdir -p $WORKSPACE/build/il/packages
cp -r -v /mnt/builds/jenkins/il_changeling_all_yocto-$BRANCH_NAME/build-packaging/* $WORKSPACE/build/il/packages
cp $WORKSPACE/build/il/packages/fsimg/rawimage.map $WORKSPACE/build/il/packages/fsimg/changeling_rawimage.map
echo &quot;Finished copying il_changeling_all files&quot;
rm -f /mnt/builds/jenkins/il_changeling_all_yocto-${BRANCH_NAME}_packaging.txt</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

for i in $(seq 1 3)
   do
      if [ -f /mnt/builds/jenkins/il_changeling_yocto-${BRANCH_NAME}_promoting.txt ]; then
         echo &quot;Promotion is in progress, wait for 5 minutes&quot;
         sleep 300
      elif (( $i &lt; 3 )) ; then
         echo &quot;No promotion is in progress, proceeding with packaging&quot;
         break
      fi
done

echo &quot;Packaging started&quot; &gt; /mnt/builds/jenkins/il_changeling_yocto-${BRANCH_NAME}_packaging.txt
echo Copying il_changeling_yocto build artifacts from /mnt/builds/jenkins/il_changeling_yocto-${BRANCH_NAME}/build-packaging/
ls -algh /mnt/builds/jenkins/il_changeling_yocto-${BRANCH_NAME}/build-packaging/*.txt
filename=`ls /mnt/builds/jenkins/il_changeling_yocto-${BRANCH_NAME}/build-packaging/il_changeling_yocto-${BRANCH_NAME}_[0-9]*.txt`
changelist=${filename: -10:6}
content=`cat $filename`
content=${content//\&quot;/}
buildno=${content#*number}
echo $changelist il_changeling_yocto $buildno &gt;&gt; .changelists
mkdir -p $WORKSPACE/build/il/packages
cp -r -v /mnt/builds/jenkins/il_changeling_yocto-${BRANCH_NAME}/build-packaging/* $WORKSPACE/build/il/packages
cp $WORKSPACE/build/il/packages/fsimg/rawimage.map $WORKSPACE/build/il/packages/fsimg/changeling_rawimage.map
echo &quot;Finished copying il_changeling files&quot;
rm -f /mnt/builds/jenkins/il_changeling_yocto-${BRANCH_NAME}_packaging.txt</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash


for i in $(seq 1 3)
   do
      if [ -f /mnt/builds/jenkins/il_chos2_yocto-${BRANCH_NAME}_promoting.txt ]; then
         echo &quot;Promotion is in progress, wait for 5 minutes&quot;
         sleep 300
      elif (( $i &lt; 3 )) ; then
         echo &quot;No promotion is in progress, proceeding with packaging&quot;
         break
      fi
done

echo &quot;Packaging started&quot; &gt; /mnt/builds/jenkins/il_chos2_yocto-${BRANCH_NAME}_packaging.txt
echo Copying il_chos2 build artifacts from /mnt/builds/jenkins/il_chos2_yocto-$BRANCH_NAME/build-packaging/
ls -algh /mnt/builds/jenkins/il_chos2_yocto-${BRANCH_NAME}/build-packaging/*.txt
filename=`ls /mnt/builds/jenkins/il_chos2_yocto-${BRANCH_NAME}/build-packaging/*.txt`
changelist=${filename: -10:6}
content=`cat $filename`
content=${content//\&quot;/}
buildno=${content#*number}
echo $changelist il_chos2_yocto $buildno &gt;&gt; .changelists
cp -r -v /mnt/builds/jenkins/il_chos2_yocto-$BRANCH_NAME/build-packaging/* $WORKSPACE/build/il/packages
echo &quot;Finished copying il_chos2 files&quot;
rm -f /mnt/builds/jenkins/il_chos2_yocto-${BRANCH_NAME}_packaging.txt</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

for i in $(seq 1 7)
   do
      if [ -f /mnt/builds/jenkins/il_virtual_yocto-${BRANCH_NAME}_promoting.txt ]; then
         echo &quot;Promotion is in progress, wait for 5 minutes&quot;
         sleep 300
      elif (( $i &lt; 7 )) ; then
         echo &quot;No promotion is in progress, proceeding with packaging&quot;
         break
      fi
done

echo &quot;Packaging started&quot; &gt; /mnt/builds/jenkins/il_virtual_yocto-${BRANCH_NAME}_packaging.txt
echo Copying il_virtual build artifacts from /mnt/builds/jenkins/il_virtual_yocto-$BRANCH_NAME/build-packaging/
ls -algh /mnt/builds/jenkins/il_virtual_yocto-${BRANCH_NAME}/build-packaging/*.txt
filename=`ls /mnt/builds/jenkins/il_virtual_yocto-${BRANCH_NAME}/build-packaging/*.txt`
changelist=${filename: -10:6}
content=`cat $filename`
content=${content//\&quot;/}
buildno=${content#*number}
echo $changelist il_virtual_yocto $buildno &gt;&gt; .changelists
cp -r -v /mnt/builds/jenkins/il_virtual_yocto-$BRANCH_NAME/build-packaging/* $WORKSPACE/build/il/packages
if [ &quot;$?&quot; -ne &quot;0&quot; ]; then
  echo &quot;error: cp failed for il_virtual_yocto&quot;
  exit 1
fi

cp $WORKSPACE/build/il/packages/fsimg/rawimage.map $WORKSPACE/build/il/packages/fsimg/virtual_rawimage.map
echo &quot;Finished copying il_virtual files&quot;
rm -f /mnt/builds/jenkins/il_virtual_yocto-${BRANCH_NAME}_packaging.txt</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

for i in $(seq 1 3)
   do
      if [ -f /mnt/builds/jenkins/il_stca-${BRANCH_NAME}_promoting.txt ]; then
         echo &quot;Promotion is in progress, wait for 5 minutes&quot;
         sleep 300
      elif (( $i &lt; 3 )) ; then
         echo &quot;No promotion is in progress, proceeding with packaging&quot;
         break
      fi
done

echo &quot;Packaging started&quot; &gt; /mnt/builds/jenkins/il_stca-${BRANCH_NAME}_packaging.txt
echo Copying il_stca build artifacts from /mnt/builds/jenkins/il_stca-$BRANCH_NAME/build-packaging/
ls -algh /mnt/builds/jenkins/il_stca-${BRANCH_NAME}/build-packaging/*.txt
filename=`ls /mnt/builds/jenkins/il_stca-${BRANCH_NAME}/build-packaging/*.txt`
changelist=${filename: -10:6}
content=`cat $filename`
content=${content//\&quot;/}
buildno=${content#*number}
echo $changelist il_stca $buildno &gt;&gt; .changelists
cp -r -v /mnt/builds/jenkins/il_stca-$BRANCH_NAME/build-packaging/* $WORKSPACE/build/il/packages
cp $WORKSPACE/build/il/packages/fsimg/rawimage.map $WORKSPACE/build/il/packages/fsimg/stca_rawimage.map
echo &quot;Finished copying il_stca files&quot;
rm -f /mnt/builds/jenkins/il_stca-${BRANCH_NAME}_packaging.txt</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

for i in $(seq 1 3)
   do
      if [ -f /mnt/builds/jenkins/il_lxc_yocto-${BRANCH_NAME}_promoting.txt ]; then
         echo &quot;Promotion is in progress, wait for 5 minutes&quot;
         sleep 300
      elif (( $i &lt; 3 )) ; then
         echo &quot;No promotion is in progress, proceeding with packaging&quot;
         break
      fi
done

echo &quot;Packaging started&quot; &gt; /mnt/builds/jenkins/il_lxc_yocto-${BRANCH_NAME}_packaging.txt
echo Copying il_lxcbuild artifacts from /mnt/builds/jenkins/il_lxc_yocto-${BRANCH_NAME}/build-packaging/
ls -algh /mnt/builds/jenkins/il_lxc_yocto-${BRANCH_NAME}/build-packaging/*.txt
filename=`ls /mnt/builds/jenkins/il_lxc_yocto-${BRANCH_NAME}/build-packaging/*.txt`
changelist=${filename: -10:6}
content=`cat $filename`
content=${content//\&quot;/}
buildno=${content#*number}
echo $changelist il_lxc_yocto $buildno &gt;&gt; .changelists
cp -r -v /mnt/builds/jenkins/il_lxc_yocto/$PACKAGE_TYPE/idltar $WORKSPACE/build/il/packages/
cp -v /mnt/builds/jenkins/il_lxc_yocto-${BRANCH_NAME}/build-packaging/bundle/k9* $WORKSPACE/build/il/packages/bundle
cp -v /mnt/builds/jenkins/il_lxc_yocto-${BRANCH_NAME}/build-packaging/bundle/*flexe* $WORKSPACE/build/il/packages/bundle
cp -v /mnt/builds/jenkins/il_lxc_yocto-${BRANCH_NAME}/build-packaging/rawimg/*lxc* $WORKSPACE/build/il/packages/rawimg
echo &quot;Finished copying il_lxcfiles&quot;
rm -f /mnt/builds/jenkins/il_lxc_yocto-${BRANCH_NAME}_packaging.txt</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

for i in $(seq 1 3)
   do
      if [ -f /mnt/builds/jenkins/il_qemu_yocto-${BRANCH_NAME}_promoting.txt ]; then
         echo &quot;Promotion is in progress, wait for 5 minutes&quot;
         sleep 300
      elif (( $i &lt; 3 )) ; then
         echo &quot;No promotion is in progress, proceeding with packaging&quot;
         break
      fi
done

echo &quot;Packaging started&quot; &gt; /mnt/builds/jenkins/il_qemu_yocto-${BRANCH_NAME}_packaging.txt
echo Copying il_qemu build artifacts from /mnt/builds/jenkins/il_qemu_yocto-${BRANCH_NAME}/build-packaging/
ls -algh /mnt/builds/jenkins/il_qemu_yocto-${BRANCH_NAME}/build-packaging/*.txt
filename=`ls /mnt/builds/jenkins/il_qemu_yocto-${BRANCH_NAME}/build-packaging/il_qemu_yocto-${BRANCH_NAME}_[0-9]*.txt`
changelist=${filename: -10:6}
content=`cat $filename`
content=${content//\&quot;/}
buildno=${content#*number}
echo $changelist il_qemu_yocto $buildno &gt;&gt; .changelists
# cp /mnt/builds/jenkins/il_qemu_yocto-${BRANCH_NAME}/build-packaging/rawimg/yocto* $WORKSPACE/build/il/packages/rawimg
cp -v /mnt/builds/jenkins/il_qemu_yocto-${BRANCH_NAME}/build-packaging/qemu*.tgz $WORKSPACE/build/il/packages/rawimg
echo &quot;Finished copying il_qemu files&quot;
rm -f /mnt/builds/jenkins/il_qemu_yocto-${BRANCH_NAME}_packaging.txt</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

for i in $(seq 1 3)
   do
      if [ -f /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}_promoting.txt ]; then
         echo &quot;Promotion is in progress, wait for 5 minutes&quot;
         sleep 300
      elif (( $i &lt; 3 )) ; then
         echo &quot;No promotion is in progress, proceeding with packaging&quot;
         break
      fi
done

echo &quot;Packaging started&quot; &gt; /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}_packaging.txt
echo Copying il_chhvm_yocto build artifacts from /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}/build-packaging/
ls -algh /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}/build-packaging/*.txt
filename=`ls /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}/build-packaging/*.txt`
changelist=${filename: -10:6}
content=`cat $filename`
content=${content//\&quot;/}
buildno=${content#*number}
echo $changelist il_chhvm_yocto $buildno &gt;&gt; .changelists
cp -v /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}/build-packaging/bundle/*.zip $WORKSPACE/build/il/packages/bundle
cp -v /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}/build-packaging/rawimg/*.map $WORKSPACE/build/il/packages/rawimg
cp -v /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}/build-packaging/rawimg/*.img.gz* $WORKSPACE/build/il/packages/rawimg
cp -v /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}/build-packaging/fsimg/*chassis_hypervisor* $WORKSPACE/build/il/packages/fsimg
cp -v /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}/build-packaging/fsimg/yocto_version $WORKSPACE/build/il/packages/fsimg
cp -v /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}/build-packaging/fsimg/*chassis_installer* $WORKSPACE/build/il/packages/fsimg

rm -f /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}_packaging.txt
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

for i in $(seq 1 3)
   do
      if [ -f /mnt/builds/jenkins/il_testmodule_contents-${BRANCH_NAME}_promoting.txt ]; then
         echo &quot;Promotion is in progress, wait for 5 minutes&quot;
         sleep 300
      elif (( $i &lt; 3 )) ; then
         echo &quot;No promotion is in progress, proceeding with packaging&quot;
         break
      fi
done

echo &quot;Packaging started&quot; &gt; /mnt/builds/jenkins/il_testmodule_contents-${BRANCH_NAME}_packaging.txt
echo Copying il_testmodule_contents build artifacts from /mnt/builds/jenkins/il_testmodule_contents-$BRANCH_NAME/build-packaging/
ls -algh /mnt/builds/jenkins/il_testmodule_contents-${BRANCH_NAME}/build-packaging/*.txt
filename=`ls /mnt/builds/jenkins/il_testmodule_contents-${BRANCH_NAME}/build-packaging/*.txt`
changelist=${filename: -10:6}
content=`cat $filename`
content=${content//\&quot;/}
buildno=${content#*number}
echo $changelist il_testmodule_contents $buildno &gt;&gt; .changelists
cp -r -v /mnt/builds/jenkins/il_testmodule_contents-$BRANCH_NAME/build-packaging/* $WORKSPACE/build/il/packages
echo &quot;Finished copying il_testmodule_contents files&quot;
rm -f /mnt/builds/jenkins/il_testmodule_contents-${BRANCH_NAME}_packaging.txt

cp $WORKSPACE/build/il/packages/fsimg/rawimage.map $WORKSPACE/build/il/packages/fsimg/main_rawimage.map
cat $WORKSPACE/build/il/packages/fsimg/changeling_rawimage.map &gt; $WORKSPACE/build/il/packages/fsimg/rawimage.map
cat $WORKSPACE/build/il/packages/fsimg/virtual_rawimage.map &gt;&gt; $WORKSPACE/build/il/packages/fsimg/rawimage.map
cat $WORKSPACE/build/il/packages/fsimg/vtc_rawimage.map &gt;&gt; $WORKSPACE/build/il/packages/fsimg/rawimage.map
cat $WORKSPACE/build/il/packages/fsimg/main_rawimage.map &gt;&gt; $WORKSPACE/build/il/packages/fsimg/rawimage.map
rm $WORKSPACE/build/il/packages/fsimg/*_rawimage.map
echo &quot;Finished copying all il ci build artifacts&quot;</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>export DEPENDENT_JOB_NAME=integration_il_centralboot_packaging
echo &quot;Removing extra l4l7 bundle package: $WORKSPACE/build/il/packages/bundle/l4l7-*..zip&quot;
rm -rf $WORKSPACE/build/il/packages/bundle/l4l7-*.zip
if [[ $INCLUDE_APPSEC_PKG == &quot;TRUE&quot; ]]; then 
    export l4l7pkg=&quot;yes&quot;
else
    export l4l7pkg=&quot;no&quot;
fi
python $WORKSPACE/Build_Scripts/Scripts/ci_run_jenkins_steps.py --createpropfile=yes --runcimaketarballs=no --runsetver=no --runciftpcentralboot=no --runcimakelstarballs=no --runcopyl4l7=$l4l7pkg --createversionfile=no</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command># echo Creating Central Boot image file
# sudo scons target=centralboot_yoctovm packaging=1

echo Create ttwb bundle file
scons -j0 target=ttwb_pkg</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>echo &quot;Creating Amara C3 image file&quot;
if [ $APP_ARCH == &quot;x86_64&quot; ]; then
    sudo scons target=c3_pkg_yocto_vm packaging=1 yocto_ver=${YOCTO_VERSION}
else
    sudo scons target=c3_pkg_yocto_vm packaging=1
fi</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>echo &quot;Copying tmos bundle from vtc job for Avalanche build ...&quot;
rm -rf $WORKSPACE/build/il/packages/tmos-av
mkdir $WORKSPACE/build/il/packages/tmos-av
cp /mnt/builds/jenkins/il_stca-$BRANCH_NAME/build-packaging/bundle/tmos*.zip .
filename=`ls tmos*.zip`
filever=${filename:5:9}
cp -f $WORKSPACE/tmos-${filever}.zip $WORKSPACE/build/il/packages/bundle/tmosvtc-${filever}.zip
rm -f $WORKSPACE/tmos-*.zip</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command># echo &quot;Copying chassisvm files ...&quot; 
# rm -rf $WORKSPACE/build/il/packages/chassisvm 
# mkdir $WORKSPACE/build/il/packages/chassisvm 
# cp $WORKSPACE/framework/il/platform/scripts/chassis/i686/c3_vm_patch/testcenter_c3* $WORKSPACE/build/il/packages/chassisvm 
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>echo &quot;Creating place holder &apos;Spirent TestCenter Application.exe&apos;  file ...&quot;
mkdir -p $WORKSPACE/build/stc/setup
echo testcenter &gt; $WORKSPACE/build/stc/setup/Spirent\ TestCenter\ Application.exe
echo testcenter_x64 &gt; $WORKSPACE/build/stc/setup/Spirent\ TestCenter\ Application\ x64.exe
echo ${STC_MAJ_MIN_VERSION}.${BLL_BUILD_NUMBER}6 &gt; $WORKSPACE/build/stc/setup/version

echo &quot;Creating controller3 fsimg file to be use for Amara recovery USB disk ...&quot;
ln -s $WORKSPACE/ChassisImage/chassis.img.gz $WORKSPACE/build/il/packages/rawimg/chassis.img.gz
# sudo $WORKSPACE/build/il/scripts/phxbld -j32 c3_yocto
# sudo $WORKSPACE/build/il/scripts/phxbld -j0 amara_yocto</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>export DEPENDENT_JOB_NAME=integration_il_centralboot_packaging
echo &quot;Running reversion_il.sh script ...&quot;
python $WORKSPACE/Build_Scripts/Scripts/ci_run_jenkins_steps.py --runilreversion=yes</command>
    </hudson.tasks.Shell>
    <hudson.plugins.python.Python plugin="python@1.3">
      <command>import os
import glob

# -- rename the output files 

workspace_dir = os.environ[&apos;WORKSPACE&apos;]
fsimg_dir = os.path.join(workspace_dir, &apos;build&apos;, &apos;il&apos;, &apos;packages&apos;, &apos;fsimg&apos;)
rawimg_dir = os.path.join(workspace_dir, &apos;build&apos;, &apos;il&apos;, &apos;packages&apos;, &apos;rawimg&apos;)


qemu_ptrn = os.path.join(rawimg_dir, &apos;yocto_cloud.512*&apos;)
qemu_images = glob.glob(qemu_ptrn)
qemu_2048_ptrn = os.path.join(rawimg_dir, &apos;yocto_cloud.2048*.img.gz&apos;)
qemu_2048_images = glob.glob(qemu_2048_ptrn)

if qemu_2048_images:
    for image in qemu_2048_images:
        new_name = image.replace(&apos;yocto_cloud.2048&apos;, &apos;qemu.512&apos;)
        new_image = os.path.join(rawimg_dir, new_name)
        print &quot;Renaming &quot; + image + &quot; to &quot; + new_image
        os.rename(image, new_image)


qemu_tgz_2048_ptrn = os.path.join(rawimg_dir, &apos;qemu.2048*.tgz&apos;)
qemu_tgz_2048_images = glob.glob(qemu_tgz_2048_ptrn)

if qemu_tgz_2048_images:
    for image in qemu_tgz_2048_images:
        new_name = image.replace(&apos;qemu.2048&apos;, &apos;qemu.512&apos;)
        new_image = os.path.join(rawimg_dir, new_name)
        print &quot;Renaming &quot; + image + &quot; to &quot; + new_image
        os.rename(image, new_image)</command>
    </hudson.plugins.python.Python>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>properties.txt,.changelists,IL_*.txt,BUILD_*.txt</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.plugins.logparser.LogParserPublisher plugin="log-parser@2.0">
      <unstableOnWarning>false</unstableOnWarning>
      <failBuildOnError>true</failBuildOnError>
      <showGraphs>false</showGraphs>
      <parsingRulesPath>/var/lib/jenkins/il_log_parse_rule</parsingRulesPath>
      <useProjectRule>false</useProjectRule>
    </hudson.plugins.logparser.LogParserPublisher>
    <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@0.17">
      <buildSteps>
        <hudson.tasks.Shell>
          <command>export RSYNCUSER=scm
export BUILD_OUTPUT_DIR=$WORKSPACE
export MARTIN_ROOT=/spirent/data/archive/pv/TestCenter
export MARTIN=martin.spirentcom.com
export RAW_BLDSTR=${BLL_BUILD_NUMBER}${BRANCH_ID}
printf -v BLDNUMBER &quot;%04d&quot; $RAW_BLDSTR
export BLDNBR=${STC_MAJ_MIN_VERSION}.${BLDNUMBER}
export BUILD_DIR=$MARTIN_ROOT/$STC_MAJ_MIN_VERSION/Engineering_Builds/IL/$BLDNBR

# -- rename build output files in fsimg directory
cd $BUILD_OUTPUT_DIR/build/il/packages/fsimg
for i in $(ls *testcenter*yoctovm*); do 
    newname=`echo $i | sed &apos;s/_yoctovm//&apos;`; 
    echo Renaming: $i to $newname;
    mv $i $newname;
done;

for i in $(ls yocto_cloud*); do 
    newname=`echo $i | sed &apos;s/yocto_cloud/qemu/&apos;`; 
    echo Renaming: $i to $newname;
    mv $i $newname;
done;

# -- create rawimage.map file
cd $BUILD_OUTPUT_DIR/build/il/packages/fsimg
mv rawimage.map rawimage.map.yocto
echo &quot;DX-10G-S8 512 changeling_64-${BLDNBR}-fs&quot; &gt; rawimage.map
echo &quot;SPT-C100-YOCTO 512 yocto-${BLDNBR}-fs&quot; &gt;&gt; rawimage.map
echo &quot;SPT-C1-YOCTO 512 yocto-${BLDNBR}-fs&quot; &gt;&gt; rawimage.map

if ls *stc_appliance* 1&gt; /dev/null 2&gt;&amp;1; then
    echo &quot;SPT-C100 512 stc_appliance-${BLDNBR}-fs&quot; &gt;&gt; rawimage.map
    echo &quot;SPT-C100-S3 512 stc_appliance-${BLDNBR}-fs&quot; &gt;&gt; rawimage.map
    echo &quot;SPT-C1 512 stc_appliance-${BLDNBR}-fs&quot; &gt;&gt; rawimage.map
    echo &quot;SPT-C50 512 stc_appliance-${BLDNBR}-fs&quot; &gt;&gt; rawimage.map
    echo &quot;SPT-S50 512 stc_appliance-${BLDNBR}-fs&quot; &gt;&gt; rawimage.map
else
    echo &quot;SPT-C100 512 appliance-${BLDNBR}-fs&quot; &gt;&gt; rawimage.map
    echo &quot;SPT-C100-S3 512 appliance-${BLDNBR}-fs&quot; &gt;&gt; rawimage.map
    echo &quot;SPT-C1 512 appliance-${BLDNBR}-fs&quot; &gt;&gt; rawimage.map
    echo &quot;SPT-C50 512 appliance-${BLDNBR}-fs&quot; &gt;&gt; rawimage.map
    echo &quot;SPT-S50 512 appliance-${BLDNBR}-fs&quot; &gt;&gt; rawimage.map
fi

echo &quot;STC-ANY-V1 512 stca-${BLDNBR}-fs&quot; &gt;&gt; rawimage.map
echo &quot;SPT-ANYWHERE 512 stca-${BLDNBR}-fs&quot; &gt;&gt; rawimage.map
echo &quot;SPT-QEMU 512 qemu-${BLDNBR}-fs&quot; &gt;&gt; rawimage.map
echo &quot;CPU-5001B 512 qemu-${BLDNBR}-fs&quot; &gt;&gt; rawimage.map
echo &quot;SPT-VIRTUAL 512 qemu-${BLDNBR}-fs&quot; &gt;&gt; rawimage.map
echo &quot;SPT-ESXI 512 qemu-${BLDNBR}-fs&quot; &gt;&gt; rawimage.map
echo &quot;VM-1G-V1 512 qemu-${BLDNBR}-fs&quot; &gt;&gt; rawimage.map
echo &quot;CPU-5004A 512 iceboy-${BLDNBR}-fs&quot; &gt;&gt; rawimage.map

# -- rename build output files in rawimg directory
cd $BUILD_OUTPUT_DIR/build/il/packages/rawimg
for i in $(ls yocto_cloud*); do 
    newname=`echo $i | sed &apos;s/yocto_cloud/qemu/&apos;`; 
    echo Renaming: $i to $newname;
    mv $i $newname;
done;

# -- rename yocto*.tgz build output files in rawimg directory
cd $BUILD_OUTPUT_DIR/build/il/packages/rawimg
for i in $(ls yocto*tgz); do 
    newname=`echo $i | sed &quot;s/[0-9]\.[0-9][0-9]\.[0-9][0-9][0-9][0-9]/${BLDNBR}/&quot;`; 
    if [ ! -f $newname ]; then
        echo Renaming: $i to $newname;
        mv $i $newname;
    fi
done;


# -- transfer (via rsync) build output files to martin
ssh ${RSYNCUSER}@${MARTIN} mkdir -p $BUILD_DIR
ssh ${RSYNCUSER}@${MARTIN} mkdir -p $BUILD_DIR/rawimg
ssh ${RSYNCUSER}@${MARTIN} mkdir -p $BUILD_DIR/mfgbld
rsync -avz --exclude=iceboy* --exclude=changeling* --exclude=stca* --exclude=yocto* $BUILD_OUTPUT_DIR/build/il/packages/fsimg ${RSYNCUSER}@${MARTIN}:$BUILD_DIR
rsync -avz $BUILD_OUTPUT_DIR/build/il/packages/fsimg/yocto_version ${RSYNCUSER}@${MARTIN}:$BUILD_DIR/fsimg
rsync -avz $BUILD_OUTPUT_DIR/build/il/packages/fsimg/yocto_signature ${RSYNCUSER}@${MARTIN}:$BUILD_DIR/fsimg
rsync -avz $BUILD_OUTPUT_DIR/build/il/packages/rawimg/qemu*.img.gz ${RSYNCUSER}@${MARTIN}:$BUILD_DIR/rawimg
rsync -avz $BUILD_OUTPUT_DIR/build/il/packages/idltar/p2CliTarBall.tar ${RSYNCUSER}@${MARTIN}:$BUILD_DIR/mfgbld/p2CliTarBall.tar
rsync -avz  $BUILD_OUTPUT_DIR/.changelists ${RSYNCUSER}@${MARTIN}:$BUILD_DIR
rsync -avz  $BUILD_OUTPUT_DIR/IL_*.txt ${RSYNCUSER}@${MARTIN}:$BUILD_DIR
# ssh ${RSYNCUSER}@${MARTIN} mkdir -p $BUILD_DIR/chassisvm
# ssh ${RSYNCUSER}@${MARTIN} mkdir -p $BUILD_DIR/stca

ssh ${RSYNCUSER}@${MARTIN} mkdir -p $BUILD_DIR/rawimg
rsync -avz $BUILD_OUTPUT_DIR/build/il/packages/rawimg/qemu*.img.gz ${RSYNCUSER}@${MARTIN}:$BUILD_DIR/rawimg

# -- transfer (via rsync) build output files to martin
rsync -avz $BUILD_OUTPUT_DIR/build/il/packages/fsimg/stca* scm@martin.spirentcom.com:$BUILD_DIR/fsimg
#rsync -avz $BUILD_OUTPUT_DIR/build/il/packages/fsimg/changeling* scm@martin.spirentcom.com:$BUILD_DIR/fsimg
rsync -avz $BUILD_OUTPUT_DIR/build/il/packages/fsimg/yocto* scm@martin.spirentcom.com:$BUILD_DIR/fsimg
rsync -avz --exclude=rawimage.map --exclude=qemu*.img.gz $BUILD_OUTPUT_DIR/build/il/packages/rawimg scm@martin.spirentcom.com:$BUILD_DIR
rsync -avz --exclude=rpm* --exclude=spec* $BUILD_OUTPUT_DIR/build/il/packages/stca scm@martin.spirentcom.com:$BUILD_DIR
# rsync -avz  $BUILD_OUTPUT_DIR/build/il/packages/mfgbld scm@martin.spirentcom.com:$BUILD_DIR
rsync -avz  $BUILD_OUTPUT_DIR/build/il/packages/bundle scm@martin.spirentcom.com:$BUILD_DIR
ssh scm@martin.spirentcom.com mkdir -p $BUILD_DIR/chassisvm
ssh scm@martin.spirentcom.com chmod 777 $BUILD_DIR/mfgbld
ssh scm@martin.spirentcom.com chmod 777 $BUILD_DIR/mfgbld/*</command>
        </hudson.tasks.Shell>
      </buildSteps>
      <scriptOnlyIfSuccess>true</scriptOnlyIfSuccess>
      <scriptOnlyIfFailure>false</scriptOnlyIfFailure>
      <markBuildUnstable>false</markBuildUnstable>
    </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.57">
      <recipientList>$DEFAULT_RECIPIENTS</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.FailureTrigger>
          <email>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.DevelopersRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern></attachmentsPattern>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.FailureTrigger>
      </configuredTriggers>
      <contentType>default</contentType>
      <defaultSubject>$DEFAULT_SUBJECT</defaultSubject>
      <defaultContent>$DEFAULT_CONTENT</defaultContent>
      <attachmentsPattern></attachmentsPattern>
      <presendScript></presendScript>
      <postsendScript></postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_RECIPIENTS</replyTo>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
    <jenkinsci.plugins.influxdb.InfluxDbPublisher plugin="influxdb@1.10.3">
      <selectedTarget>http://influxdb-01.cal.ci.spirentcom.com:8086,release_jenkins_db</selectedTarget>
      <customPrefix></customPrefix>
    </jenkinsci.plugins.influxdb.InfluxDbPublisher>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.35.2">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.FileBuildParameters>
              <propertiesFile>properties.txt</propertiesFile>
              <failTriggerOnMissing>false</failTriggerOnMissing>
              <textParamValueOnNewLine>false</textParamValueOnNewLine>
              <useMatrixChild>false</useMatrixChild>
              <onlyExactRuns>false</onlyExactRuns>
            </hudson.plugins.parameterizedtrigger.FileBuildParameters>
          </configs>
          <projects>release_set_status,release_reset_tag_file,release_cxx_amara_usb_yocto1.5,release_upload_stca_stcv_orion</projects>
          <condition>SUCCESS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <triggerFromChildProjects>false</triggerFromChildProjects>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.CurrentBuildParameters/>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>STC_VERSION=${STC_MAJ_MIN_VERSION}.${BLL_BUILD_NUMBER}${BRANCH_ID}</properties>
              <textParamValueOnNewLine>false</textParamValueOnNewLine>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>release_il_docker_pkg</projects>
          <condition>SUCCESS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <triggerFromChildProjects>false</triggerFromChildProjects>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
  </publishers>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.8.8"/>
    <org.jenkinsci.plugins.preSCMbuildstep.PreSCMBuildStepsWrapper plugin="preSCMbuildstep@0.3">
      <buildSteps>
        <hudson.tasks.Shell>
          <command># remove files using sudo for files that may be
# owned by root
if [[ $P4CLEANWORKSPACE = &quot;true&quot; ]]; then 
    sudo rm -rf $WORKSPACE/
    echo 3LoQdl*vYiz3| p4 -p perforce.spirentcom.com:1666 -u scmbuild login
    p4 -c jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME} -p perforce.spirentcom.com:1666 -u scmbuild sync //jenkins-${NODE_NAME}-${JOB_NAME}-${BRANCH_NAME}/...#none
fi</command>
        </hudson.tasks.Shell>
      </buildSteps>
      <failOnError>false</failOnError>
    </org.jenkinsci.plugins.preSCMbuildstep.PreSCMBuildStepsWrapper>
  </buildWrappers>
</project>