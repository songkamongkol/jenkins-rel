<?xml version="1.0" encoding="UTF-8"?><project>
  <actions/>
  <description>IL Build job for centralboot image targets:&lt;br&gt;
target=centralboot packaging=1&lt;br&gt;
Copies artfacts from ci jobs: il_changeling_all, il_chos2, il_virtual, il_vtc, il_testmodule_contents&lt;br&gt;
Then runs Centralboot to generate centralboot image and run reversion script to update the version info.&lt;br&gt;
</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>15</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.4.1">
      <useBuildBlocker>false</useBuildBlocker>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH_NAME</name>
          <description>branch name</description>
          <defaultValue>4.81_rel</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>P4CLEANWORKSPACE</name>
          <description>clean build</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BLL_BUILD_NUMBER</name>
          <description>This is used to pass a common build number to all IL and BLL build jobs run during the nightly build process.</description>
          <defaultValue>BAD_BUILD_NUMBER</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>STC_MAJ_MIN_VERSION</name>
          <description/>
          <defaultValue>4.81</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SOURCE_OS</name>
          <description/>
          <defaultValue>IL</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH_ID</name>
          <description/>
          <defaultValue>6</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>INCLUDE_APPSEC_PKG</name>
          <description/>
          <defaultValue>TRUE</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.22">
      <autoRebuild>false</autoRebuild>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <scm class="hudson.plugins.perforce.PerforceSCM" plugin="perforce@1.3.34">
    <configVersion>2</configVersion>
    <p4User>scmbuild</p4User>
    <p4Passwd/>
    <p4Port>perforce.spirentcom.com:1666</p4Port>
    <p4Client>${JOB_NAME}_${BRANCH_NAME}</p4Client>
    <projectPath>//SCM/Scripts/ci_* //ws/Build_Scripts/Scripts/ci_*
+//TestCenter/${BRANCH_NAME}/... //ws/...
-//TestCenter/*/sandbox/...
-//TestCenter/*/.../WebHelp/...
-//TestCenter/*/Bakeoff_TestCaseScripts/...
-//TestCenter/*/other/...
-//TestCenter/*/documents/...
-//TestCenter/*/schedules/...
-//TestCenter/*/scm/...
-//TestCenter/*/regression/...
-//TestCenter/*/userdocauto/...
-//TestCenter/*/common/lib/boost_1_34_0/...
-//TestCenter/*/framework/ui/...
-//TestCenter/*/content/.../ui/...
-//TestCenter/*/.../bll/...
+//TestCenter/${BRANCH_NAME}/framework/bll/base/... //ws/framework/bll/base/...
+//TestCenter/${BRANCH_NAME}/framework/bll/unittestdrv/... //ws/framework/bll/unittestdrv/...
+//TestCenter/${BRANCH_NAME}/framework/bll/vendor/... //ws/framework/bll/vendor/...
//hypervisor/mainline/amara/ChassisImage/...  //ws/ChassisImage/...</projectPath>
    <projectOptions>noallwrite clobber nocompress unlocked nomodtime rmdir</projectOptions>
    <clientOwner/>
    <p4SysDrive>C:</p4SysDrive>
    <p4SysRoot>C:\WINDOWS</p4SysRoot>
    <browser class="hudson.plugins.perforce.browsers.P4Web">
      <url>http://jenkins.ad.spirentcom.com:5104/</url>
      <p4WebEndShite>?ac=22</p4WebEndShite>
      <p4DifEndShite>?ac=19</p4DifEndShite>
      <p4ClEndShite>?ac=10</p4ClEndShite>
    </browser>
    <p4Tool>p4</p4Tool>
    <useClientSpec>false</useClientSpec>
    <useStreamDepot>false</useStreamDepot>
    <forceSync>false</forceSync>
    <alwaysForceSync>false</alwaysForceSync>
    <dontUpdateServer>false</dontUpdateServer>
    <disableAutoSync>false</disableAutoSync>
    <disableChangeLogOnly>false</disableChangeLogOnly>
    <disableSyncOnly>false</disableSyncOnly>
    <showIntegChanges>false</showIntegChanges>
    <useOldClientName>false</useOldClientName>
    <createWorkspace>true</createWorkspace>
    <updateView>true</updateView>
    <dontRenameClient>false</dontRenameClient>
    <updateCounterValue>false</updateCounterValue>
    <dontUpdateClient>false</dontUpdateClient>
    <exposeP4Passwd>false</exposeP4Passwd>
    <wipeBeforeBuild>false</wipeBeforeBuild>
    <quickCleanBeforeBuild>false</quickCleanBeforeBuild>
    <restoreChangedDeletedFiles>false</restoreChangedDeletedFiles>
    <wipeRepoBeforeBuild>false</wipeRepoBeforeBuild>
    <firstChange>-1</firstChange>
    <fileLimit>0</fileLimit>
    <excludedFilesCaseSensitivity>true</excludedFilesCaseSensitivity>
    <slaveClientNameFormat>${basename}-${hash}</slaveClientNameFormat>
    <lineEndValue>local</lineEndValue>
    <useViewMask>true</useViewMask>
    <useViewMaskForPolling>true</useViewMaskForPolling>
    <useViewMaskForSyncing>false</useViewMaskForSyncing>
    <useViewMaskForChangeLog>false</useViewMaskForChangeLog>
    <pollOnlyOnMaster>true</pollOnlyOnMaster>
  </scm>
  <quietPeriod>120</quietPeriod>
  <assignedNode>ilpkg-02</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>true</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>env
p4 info

echo Clean up prior to extracting tarballs

# make the version file writeable
sudo chmod 777 $WORKSPACE/build/il/version

# need to remove information in repos directory and packages directory
sudo -S rm -rf $WORKSPACE/build/il/repos/*
sudo -S rm -rf $WORKSPACE/build/il/packages/*


sudo scons target=packageclean
sudo scons target=kernelclean

rm -f $WORKSPACE/*.txt</command>
    </hudson.tasks.Shell>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.35">
      <project>release_launch_nightly_packaging</project>
      <filter>*IL_*.txt,BUILD_*.txt</filter>
      <target/>
      <excludes/>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector"/>
      <flatten>true</flatten>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

if [[ $INCLUDE_APPSEC_PKG == "FALSE" ]]; then 
    exit 0
fi

if [ -f /mnt/builds/jenkins/il_changeling_all_yocto-${BRANCH_NAME}_promoting.txt ]; then
echo "Promotion is in progress, wait for 5 minutes"
sleep 300
else
echo "No promotion is in progress, proceeding with packaging"
fi

echo "Packaging started" &gt; /mnt/builds/jenkins/il_changeling_all_yocto-${BRANCH_NAME}_packaging.txt
echo Copying il_changeling_all build artifacts from /mnt/builds/jenkins/il_changeling_all_yocto-$BRANCH_NAME/build-packaging/
ls -algh /mnt/builds/jenkins/il_changeling_all_yocto-$BRANCH_NAME/build-packaging/*.txt
filename=`ls /mnt/builds/jenkins/il_changeling_all_yocto-$BRANCH_NAME/build-packaging/*.txt`
changelist=${filename: -10:6}
content=`cat $filename`
content=${content//\"/}
buildno=${content#*number}
echo $changelist il_changeling_all_yocto $buildno &gt; .changelists
mkdir -p $WORKSPACE/build/il/packages
cp -r /mnt/builds/jenkins/il_changeling_all_yocto-$BRANCH_NAME/build-packaging/* $WORKSPACE/build/il/packages
cp $WORKSPACE/build/il/packages/fsimg/rawimage.map $WORKSPACE/build/il/packages/fsimg/changeling_rawimage.map
echo "Finished copying il_changeling_all files"
rm -f /mnt/builds/jenkins/il_changeling_all_yocto-${BRANCH_NAME}_packaging.txt</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

if [ -f /mnt/builds/jenkins/il_changeling_yocto-${BRANCH_NAME}_promoting.txt ]; then
echo "Promotion is in progress, wait for 5 minutes"
sleep 300
else
echo "No promotion is in progress, proceeding with packaging"
fi

echo "Packaging started" &gt; /mnt/builds/jenkins/il_changeling_yocto-${BRANCH_NAME}_packaging.txt
echo Copying il_changeling_yocto build artifacts from /mnt/builds/jenkins/il_changeling_yocto-${BRANCH_NAME}/build-packaging/
ls -algh /mnt/builds/jenkins/il_changeling_yocto-${BRANCH_NAME}/build-packaging/*.txt
filename=`ls /mnt/builds/jenkins/il_changeling_yocto-${BRANCH_NAME}/build-packaging/il_changeling_yocto-${BRANCH_NAME}_[0-9]*.txt`
changelist=${filename: -10:6}
content=`cat $filename`
content=${content//\"/}
buildno=${content#*number}
echo $changelist il_changeling_yocto $buildno &gt;&gt; .changelists
mkdir -p $WORKSPACE/build/il/packages
cp -r /mnt/builds/jenkins/il_changeling_yocto-${BRANCH_NAME}/build-packaging/* $WORKSPACE/build/il/packages
cp $WORKSPACE/build/il/packages/fsimg/rawimage.map $WORKSPACE/build/il/packages/fsimg/changeling_rawimage.map
echo "Finished copying il_changeling files"
rm -f /mnt/builds/jenkins/il_changeling_yocto-${BRANCH_NAME}_packaging.txt</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

if [ -f /mnt/builds/jenkins/il_chos2_yocto-${BRANCH_NAME}_promoting.txt ]; then
echo "Promotion is in progress, wait for 5 minutes"
sleep 300
else
echo "No promotion is in progress, proceeding with packaging"
fi

echo "Packaging started" &gt; /mnt/builds/jenkins/il_chos2_yocto-${BRANCH_NAME}_packaging.txt
echo Copying il_chos2 build artifacts from /mnt/builds/jenkins/il_chos2_yocto-$BRANCH_NAME/build-packaging/
ls -algh /mnt/builds/jenkins/il_chos2_yocto-${BRANCH_NAME}/build-packaging/*.txt
filename=`ls /mnt/builds/jenkins/il_chos2_yocto-${BRANCH_NAME}/build-packaging/*.txt`
changelist=${filename: -10:6}
content=`cat $filename`
content=${content//\"/}
buildno=${content#*number}
echo $changelist il_chos2_yocto $buildno &gt;&gt; .changelists
cp -r /mnt/builds/jenkins/il_chos2_yocto-$BRANCH_NAME/build-packaging/* $WORKSPACE/build/il/packages
echo "Finished copying il_chos2 files"
rm -f /mnt/builds/jenkins/il_chos2_yocto-${BRANCH_NAME}_packaging.txt</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

if [ -f /mnt/builds/jenkins/il_virtual_yocto-${BRANCH_NAME}_promoting.txt ]; then
echo "Promotion is in progress, wait for 5 minutes"
sleep 300
else
echo "No promotion is in progress, proceeding with packaging"
fi

echo "Packaging started" &gt; /mnt/builds/jenkins/il_virtual_yocto-${BRANCH_NAME}_packaging.txt
echo Copying il_virtual build artifacts from /mnt/builds/jenkins/il_virtual_yocto-$BRANCH_NAME/build-packaging/
ls -algh /mnt/builds/jenkins/il_virtual_yocto-${BRANCH_NAME}/build-packaging/*.txt
filename=`ls /mnt/builds/jenkins/il_virtual_yocto-${BRANCH_NAME}/build-packaging/*.txt`
changelist=${filename: -10:6}
content=`cat $filename`
content=${content//\"/}
buildno=${content#*number}
echo $changelist il_virtual_yocto $buildno &gt;&gt; .changelists
cp -r -v /mnt/builds/jenkins/il_virtual_yocto-$BRANCH_NAME/build-packaging/* $WORKSPACE/build/il/packages
if [ "$?" -ne "0" ]; then
  echo "error: cp failed for il_virtual_yocto"
  exit 1
fi

cp $WORKSPACE/build/il/packages/fsimg/rawimage.map $WORKSPACE/build/il/packages/fsimg/virtual_rawimage.map
echo "Finished copying il_virtual files"
rm -f /mnt/builds/jenkins/il_virtual_yocto-${BRANCH_NAME}_packaging.txt</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

if [ -f /mnt/builds/jenkins/il_stca-${BRANCH_NAME}_promoting.txt ]; then
echo "Promotion is in progress, wait for 5 minutes"
sleep 300
else
echo "No promotion is in progress, proceeding with packaging"
fi

echo "Packaging started" &gt; /mnt/builds/jenkins/il_stca-${BRANCH_NAME}_packaging.txt
echo Copying il_stca build artifacts from /mnt/builds/jenkins/il_stca-$BRANCH_NAME/build-packaging/
ls -algh /mnt/builds/jenkins/il_stca-${BRANCH_NAME}/build-packaging/*.txt
filename=`ls /mnt/builds/jenkins/il_stca-${BRANCH_NAME}/build-packaging/*.txt`
changelist=${filename: -10:6}
content=`cat $filename`
content=${content//\"/}
buildno=${content#*number}
echo $changelist il_stca $buildno &gt;&gt; .changelists
cp -r /mnt/builds/jenkins/il_stca-$BRANCH_NAME/build-packaging/* $WORKSPACE/build/il/packages
cp $WORKSPACE/build/il/packages/fsimg/rawimage.map $WORKSPACE/build/il/packages/fsimg/stca_rawimage.map
echo "Finished copying il_stca files"
rm -f /mnt/builds/jenkins/il_stca-${BRANCH_NAME}_packaging.txt</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

if [ -f /mnt/builds/jenkins/il_lxc_yocto-${BRANCH_NAME}_promoting.txt ]; then
echo "Promotion is in progress, wait for 5 minutes"
sleep 300
else
echo "No promotion is in progress, proceeding with packaging"
fi

echo "Packaging started" &gt; /mnt/builds/jenkins/il_lxc_yocto-${BRANCH_NAME}_packaging.txt
echo Copying il_lxcbuild artifacts from /mnt/builds/jenkins/il_lxc_yocto-${BRANCH_NAME}/build-packaging/
ls -algh /mnt/builds/jenkins/il_lxc_yocto-${BRANCH_NAME}/build-packaging/*.txt
filename=`ls /mnt/builds/jenkins/il_lxc_yocto-${BRANCH_NAME}/build-packaging/*.txt`
changelist=${filename: -10:6}
content=`cat $filename`
content=${content//\"/}
buildno=${content#*number}
echo $changelist il_lxc_yocto $buildno &gt;&gt; .changelists
cp /mnt/builds/jenkins/il_lxc_yocto-${BRANCH_NAME}/build-packaging/bundle/k9* $WORKSPACE/build/il/packages/bundle
cp /mnt/builds/jenkins/il_lxc_yocto-${BRANCH_NAME}/build-packaging/rawimg/*lxc* $WORKSPACE/build/il/packages/rawimg
echo "Finished copying il_lxcfiles"
rm -f /mnt/builds/jenkins/il_lxc_yocto-${BRANCH_NAME}_packaging.txt</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

if [ -f /mnt/builds/jenkins/il_qemu_yocto-${BRANCH_NAME}_promoting.txt ]; then
echo "Promotion is in progress, wait for 5 minutes"
sleep 300
else
echo "No promotion is in progress, proceeding with packaging"
fi

echo "Packaging started" &gt; /mnt/builds/jenkins/il_qemu_yocto-${BRANCH_NAME}_packaging.txt
echo Copying il_qemu build artifacts from /mnt/builds/jenkins/il_qemu_yocto-${BRANCH_NAME}/build-packaging/
ls -algh /mnt/builds/jenkins/il_qemu_yocto-${BRANCH_NAME}/build-packaging/*.txt
filename=`ls /mnt/builds/jenkins/il_qemu_yocto-${BRANCH_NAME}/build-packaging/il_qemu_yocto-${BRANCH_NAME}_[0-9]*.txt`
changelist=${filename: -10:6}
content=`cat $filename`
content=${content//\"/}
buildno=${content#*number}
echo $changelist il_qemu_yocto $buildno &gt;&gt; .changelists
# cp /mnt/builds/jenkins/il_qemu_yocto-${BRANCH_NAME}/build-packaging/rawimg/yocto* $WORKSPACE/build/il/packages/rawimg
cp /mnt/builds/jenkins/il_qemu_yocto-${BRANCH_NAME}/build-packaging/qemu*.tgz $WORKSPACE/build/il/packages/rawimg
echo "Finished copying il_qemu files"
rm -f /mnt/builds/jenkins/il_qemu_yocto-${BRANCH_NAME}_packaging.txt</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

if [ -f /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}_promoting.txt ]; then
echo "Promotion is in progress, wait for 5 minutes"
sleep 300
else
echo "No promotion is in progress, proceeding with packaging"
fi

echo "Packaging started" &gt; /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}_packaging.txt
echo Copying il_chhvm_yocto build artifacts from /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}/build-packaging/
ls -algh /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}/build-packaging/*.txt
filename=`ls /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}/build-packaging/*.txt`
changelist=${filename: -10:6}
content=`cat $filename`
content=${content//\"/}
buildno=${content#*number}
echo $changelist il_chhvm_yocto $buildno &gt;&gt; .changelists
cp -v /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}/build-packaging/bundle/*.zip $WORKSPACE/build/il/packages/bundle
cp -v /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}/build-packaging/rawimg/*.map $WORKSPACE/build/il/packages/rawimg
cp -v /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}/build-packaging/rawimg/*.img.gz* $WORKSPACE/build/il/packages/rawimg
cp -v /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}/build-packaging/fsimg/*chassis_hypervisor* $WORKSPACE/build/il/packages/fsimg
cp -v /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}/build-packaging/fsimg/yocto_version $WORKSPACE/build/il/packages/fsimg
cp -v /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}/build-packaging/fsimg/*chassis_installer* $WORKSPACE/build/il/packages/fsimg
cp -v /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}/build-packaging/rawimg/chassisController_test.tgz $WORKSPACE/build/il/packages/rawimg
rm -f /mnt/builds/jenkins/il_chhvm_yocto-${BRANCH_NAME}_packaging.txt
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

if [ -f /mnt/builds/jenkins/il_testmodule_contents-${BRANCH_NAME}_promoting.txt ]; then
echo "Promotion is in progress, wait for 5 minutes"
sleep 300
else
echo "No promotion is in progress, proceeding with packaging"
fi


echo "Packaging started" &gt; /mnt/builds/jenkins/il_testmodule_contents-${BRANCH_NAME}_packaging.txt
echo Copying il_testmodule_contents build artifacts from /mnt/builds/jenkins/il_testmodule_contents-$BRANCH_NAME/build-packaging/
ls -algh /mnt/builds/jenkins/il_testmodule_contents-${BRANCH_NAME}/build-packaging/*.txt
filename=`ls /mnt/builds/jenkins/il_testmodule_contents-${BRANCH_NAME}/build-packaging/*.txt`
changelist=${filename: -10:6}
content=`cat $filename`
content=${content//\"/}
buildno=${content#*number}
echo $changelist il_testmodule_contents $buildno &gt;&gt; .changelists
cp -r /mnt/builds/jenkins/il_testmodule_contents-$BRANCH_NAME/build-packaging/* $WORKSPACE/build/il/packages
echo "Finished copying il_testmodule_contents files"
rm -f /mnt/builds/jenkins/il_testmodule_contents-${BRANCH_NAME}_packaging.txt

cp $WORKSPACE/build/il/packages/fsimg/rawimage.map $WORKSPACE/build/il/packages/fsimg/main_rawimage.map
cat $WORKSPACE/build/il/packages/fsimg/changeling_rawimage.map &gt; $WORKSPACE/build/il/packages/fsimg/rawimage.map
cat $WORKSPACE/build/il/packages/fsimg/virtual_rawimage.map &gt;&gt; $WORKSPACE/build/il/packages/fsimg/rawimage.map
cat $WORKSPACE/build/il/packages/fsimg/vtc_rawimage.map &gt;&gt; $WORKSPACE/build/il/packages/fsimg/rawimage.map
cat $WORKSPACE/build/il/packages/fsimg/main_rawimage.map &gt;&gt; $WORKSPACE/build/il/packages/fsimg/rawimage.map
rm $WORKSPACE/build/il/packages/fsimg/*_rawimage.map
echo "Finished copying all il ci build artifacts"</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>export DEPENDENT_JOB_NAME=integration_il_centralboot_packaging
echo "Removing extra l4l7 bundle package: $WORKSPACE/build/il/packages/bundle/l4l7-*..zip"
rm -rf $WORKSPACE/build/il/packages/bundle/l4l7-*.zip
if [[ $INCLUDE_APPSEC_PKG == "TRUE" ]]; then 
    export l4l7pkg="yes"
else
    export l4l7pkg="no"
fi
python $WORKSPACE/Build_Scripts/Scripts/ci_run_jenkins_steps.py --createpropfile=yes --runcimaketarballs=no --runsetver=no --runciftpcentralboot=no --runcimakelstarballs=no --runcopyl4l7=$l4l7pkg --createversionfile=no</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>echo Creating Central Boot image file
sudo scons target=centralboot_yoctovm packaging=1

echo Create ttwb bundle file
scons -j0 target=ttwb_pkg</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>echo "Creating Amara C3 image file"
sudo scons target=c3_pkg_yocto_vm packaging=1
# $WORKSPACE/build/il/scripts/phxbld -j8 c3_yocto  # run this target after a clean build
# sudo scons target=c3_pkg_yocto packaging=1</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>echo "Copying tmos bundle from vtc job for Avalanche build ..."
rm -rf $WORKSPACE/build/il/packages/tmos-av
mkdir $WORKSPACE/build/il/packages/tmos-av
cp /mnt/builds/jenkins/il_stca-$BRANCH_NAME/build-packaging/bundle/tmos*.zip .
filename=`ls tmos*.zip`
filever=${filename:5:9}
cp -f $WORKSPACE/tmos-${filever}.zip $WORKSPACE/build/il/packages/bundle/tmosvtc-${filever}.zip
rm -f $WORKSPACE/tmos-*.zip</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command># echo "Copying chassisvm files ..." 
# rm -rf $WORKSPACE/build/il/packages/chassisvm 
# mkdir $WORKSPACE/build/il/packages/chassisvm 
# cp $WORKSPACE/framework/il/platform/scripts/chassis/i686/c3_vm_patch/testcenter_c3* $WORKSPACE/build/il/packages/chassisvm 
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>echo "Creating place holder 'Spirent TestCenter Application.exe'  file ..."
mkdir -p $WORKSPACE/build/stc/setup
echo testcenter &gt; $WORKSPACE/build/stc/setup/Spirent\ TestCenter\ Application.exe
echo ${STC_MAJ_MIN_VERSION}.${BLL_BUILD_NUMBER}6 &gt; $WORKSPACE/build/stc/setup/version

echo "Creating controller3 fsimg file to be use for Amara recovery USB disk ..."
ln -s $WORKSPACE/ChassisImage/chassis.img.gz $WORKSPACE/build/il/packages/rawimg/chassis.img.gz
# sudo $WORKSPACE/build/il/scripts/phxbld -j32 c3_yocto
# sudo $WORKSPACE/build/il/scripts/phxbld -j0 amara_yocto</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>export DEPENDENT_JOB_NAME=integration_il_centralboot_packaging
echo "Running reversion_il.sh script ..."
python $WORKSPACE/Build_Scripts/Scripts/ci_run_jenkins_steps.py --runilreversion=yes</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>properties.txt,.changelists,IL_*.txt,BUILD_*.txt</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
    </hudson.tasks.ArtifactArchiver>
    <hudson.plugins.logparser.LogParserPublisher plugin="log-parser@1.0.8">
      <unstableOnWarning>false</unstableOnWarning>
      <failBuildOnError>true</failBuildOnError>
      <parsingRulesPath>/var/lib/jenkins/il_log_parse_rule</parsingRulesPath>
    </hudson.plugins.logparser.LogParserPublisher>
    <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@0.17">
      <buildSteps>
        <hudson.tasks.Shell>
          <command>export RSYNCUSER=scm
export BUILD_OUTPUT_DIR=$WORKSPACE
export MARTIN_ROOT=/spirent/data/archive/pv/TestCenter
export MARTIN=martin.spirentcom.com
export RAW_BLDSTR=${BLL_BUILD_NUMBER}${BRANCH_ID}
printf -v BLDNUMBER "%04d" $RAW_BLDSTR
export BLDNBR=${STC_MAJ_MIN_VERSION}.${BLDNUMBER}
export BUILD_DIR=$MARTIN_ROOT/$STC_MAJ_MIN_VERSION/Engineering_Builds/IL/$BLDNBR

# -- rename build output files in fsimg directory
cd $BUILD_OUTPUT_DIR/build/il/packages/fsimg
for i in $(ls *testcenter*yoctovm*); do 
    newname=`echo $i | sed 's/_yoctovm//'`; 
    echo Renaming: $i to $newname;
    mv $i $newname;
done;

for i in $(ls yocto_cloud*); do 
    newname=`echo $i | sed 's/yocto_cloud/qemu/'`; 
    echo Renaming: $i to $newname;
    mv $i $newname;
done;

# -- create rawimage.map file
cd $BUILD_OUTPUT_DIR/build/il/packages/fsimg
mv rawimage.map rawimage.map.yocto
echo "DX-10G-S8 512 changeling_64-${BLDNBR}-fs" &gt; rawimage.map
echo "SPT-C100-YOCTO 512 yocto-${BLDNBR}-fs" &gt;&gt; rawimage.map
echo "SPT-C1-YOCTO 512 yocto-${BLDNBR}-fs" &gt;&gt; rawimage.map

if ls *stc_appliance* 1&gt; /dev/null 2&gt;&amp;1; then
    echo "SPT-C100 512 stc_appliance-${BLDNBR}-fs" &gt;&gt; rawimage.map
    echo "SPT-C100-S3 512 stc_appliance-${BLDNBR}-fs" &gt;&gt; rawimage.map
    echo "SPT-C1 512 stc_appliance-${BLDNBR}-fs" &gt;&gt; rawimage.map
    echo "SPT-C50 512 stc_appliance-${BLDNBR}-fs" &gt;&gt; rawimage.map
    echo "SPT-S50 512 stc_appliance-${BLDNBR}-fs" &gt;&gt; rawimage.map
else
    echo "SPT-C100 512 appliance-${BLDNBR}-fs" &gt;&gt; rawimage.map
    echo "SPT-C100-S3 512 appliance-${BLDNBR}-fs" &gt;&gt; rawimage.map
    echo "SPT-C1 512 appliance-${BLDNBR}-fs" &gt;&gt; rawimage.map
    echo "SPT-C50 512 appliance-${BLDNBR}-fs" &gt;&gt; rawimage.map
    echo "SPT-S50 512 appliance-${BLDNBR}-fs" &gt;&gt; rawimage.map
fi

echo "STC-ANY-V1 512 stca-${BLDNBR}-fs" &gt;&gt; rawimage.map
echo "SPT-ANYWHERE 512 stca-${BLDNBR}-fs" &gt;&gt; rawimage.map
echo "SPT-QEMU 512 qemu-${BLDNBR}-fs" &gt;&gt; rawimage.map
echo "CPU-5001B 512 qemu-${BLDNBR}-fs" &gt;&gt; rawimage.map
echo "SPT-VIRTUAL 512 qemu-${BLDNBR}-fs" &gt;&gt; rawimage.map
echo "SPT-ESXI 512 qemu-${BLDNBR}-fs" &gt;&gt; rawimage.map
echo "VM-1G-V1 512 qemu-${BLDNBR}-fs" &gt;&gt; rawimage.map
echo "CPU-5004A 512 iceboy-${BLDNBR}-fs" &gt;&gt; rawimage.map

# -- rename build output files in rawimg directory
cd $BUILD_OUTPUT_DIR/build/il/packages/rawimg
for i in $(ls yocto_cloud*); do 
    newname=`echo $i | sed 's/yocto_cloud/qemu/'`; 
    echo Renaming: $i to $newname;
    mv $i $newname;
done;

# -- rename yocto*.tgz build output files in rawimg directory
cd $BUILD_OUTPUT_DIR/build/il/packages/rawimg
for i in $(ls yocto*tgz); do 
    newname=`echo $i | sed "s/[0-9].[0-9][0-9].[0-9][0-9][0-9][0-9]/${BLDNBR}/"`; 
    echo Renaming: $i to $newname;
    mv $i $newname;
done;


# -- transfer (via rsync) build output files to martin
ssh ${RSYNCUSER}@${MARTIN} mkdir -p $BUILD_DIR
ssh ${RSYNCUSER}@${MARTIN} mkdir -p $BUILD_DIR/rawimg
ssh ${RSYNCUSER}@${MARTIN} mkdir -p $BUILD_DIR/mfgbld
rsync -avz --exclude=iceboy* --exclude=changeling* --exclude=stca* --exclude=yocto* $BUILD_OUTPUT_DIR/build/il/packages/fsimg ${RSYNCUSER}@${MARTIN}:$BUILD_DIR
rsync -avz $BUILD_OUTPUT_DIR/build/il/packages/fsimg/yocto_version ${RSYNCUSER}@${MARTIN}:$BUILD_DIR/fsimg
rsync -avz $BUILD_OUTPUT_DIR/build/il/packages/fsimg/yocto_signature ${RSYNCUSER}@${MARTIN}:$BUILD_DIR/fsimg
rsync -avz $BUILD_OUTPUT_DIR/build/il/packages/rawimg/qemu*.img.gz ${RSYNCUSER}@${MARTIN}:$BUILD_DIR/rawimg
rsync -avz $BUILD_OUTPUT_DIR/build/il/packages/idltar/p2CliTarBall.tar ${RSYNCUSER}@${MARTIN}:$BUILD_DIR/mfgbld/p2CliTarBall.tar
rsync -avz  $BUILD_OUTPUT_DIR/.changelists ${RSYNCUSER}@${MARTIN}:$BUILD_DIR
rsync -avz  $BUILD_OUTPUT_DIR/IL_*.txt ${RSYNCUSER}@${MARTIN}:$BUILD_DIR
# ssh ${RSYNCUSER}@${MARTIN} mkdir -p $BUILD_DIR/chassisvm
# ssh ${RSYNCUSER}@${MARTIN} mkdir -p $BUILD_DIR/stca

ssh ${RSYNCUSER}@${MARTIN} mkdir -p $BUILD_DIR/rawimg
rsync -avz $BUILD_OUTPUT_DIR/build/il/packages/rawimg/qemu*.img.gz ${RSYNCUSER}@${MARTIN}:$BUILD_DIR/rawimg

# -- transfer (via rsync) build output files to martin
rsync -avz $BUILD_OUTPUT_DIR/build/il/packages/fsimg/stca* scm@martin.spirentcom.com:$BUILD_DIR/fsimg
#rsync -avz $BUILD_OUTPUT_DIR/build/il/packages/fsimg/changeling* scm@martin.spirentcom.com:$BUILD_DIR/fsimg
rsync -avz $BUILD_OUTPUT_DIR/build/il/packages/fsimg/yocto* scm@martin.spirentcom.com:$BUILD_DIR/fsimg
rsync -avz --exclude=rawimage.map --exclude=qemu*.img.gz $BUILD_OUTPUT_DIR/build/il/packages/rawimg scm@martin.spirentcom.com:$BUILD_DIR
rsync -avz --exclude=rpm* --exclude=spec* $BUILD_OUTPUT_DIR/build/il/packages/stca scm@martin.spirentcom.com:$BUILD_DIR
rsync -avz  $BUILD_OUTPUT_DIR/build/il/packages/mfgbld scm@martin.spirentcom.com:$BUILD_DIR
rsync -avz  $BUILD_OUTPUT_DIR/build/il/packages/bundle scm@martin.spirentcom.com:$BUILD_DIR
ssh scm@martin.spirentcom.com mkdir -p $BUILD_DIR/chassisvm
ssh scm@martin.spirentcom.com chmod 777 $BUILD_DIR/mfgbld
ssh scm@martin.spirentcom.com chmod 777 $BUILD_DIR/mfgbld/*</command>
        </hudson.tasks.Shell>
      </buildSteps>
      <scriptOnlyIfSuccess>true</scriptOnlyIfSuccess>
      <scriptOnlyIfFailure>false</scriptOnlyIfFailure>
      <markBuildUnstable>false</markBuildUnstable>
      <executeOn>BOTH</executeOn>
    </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.39">
      <recipientList>$DEFAULT_RECIPIENTS</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.FailureTrigger>
          <email>
            <recipientList/>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.DevelopersRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern/>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo/>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.FailureTrigger>
      </configuredTriggers>
      <contentType>default</contentType>
      <defaultSubject>$DEFAULT_SUBJECT</defaultSubject>
      <defaultContent>$DEFAULT_CONTENT</defaultContent>
      <attachmentsPattern/>
      <presendScript/>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_RECIPIENTS</replyTo>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.25">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.FileBuildParameters>
              <propertiesFile>properties.txt</propertiesFile>
              <failTriggerOnMissing>false</failTriggerOnMissing>
              <useMatrixChild>false</useMatrixChild>
              <onlyExactRuns>false</onlyExactRuns>
            </hudson.plugins.parameterizedtrigger.FileBuildParameters>
          </configs>
          <projects>release_set_status,release_reset_tag_file,release_cxx_amara_usb_yocto1.5,release_upload_stca_stcv_orion</projects>
          <condition>SUCCESS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.CurrentBuildParameters/>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>STC_VERSION=${STC_MAJ_MIN_VERSION}.${BLL_BUILD_NUMBER}${BRANCH_ID}</properties>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>release_il_docker_pkg</projects>
          <condition>SUCCESS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
  </publishers>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.5.16"/>
  </buildWrappers>
</project>